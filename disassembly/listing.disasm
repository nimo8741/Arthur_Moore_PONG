Disassembly Listing for PONG_project
Generated From:
C:/Users/nickm/Documents/CU-Boulder Senior Year/ASEN 4419/Final Project/PONG_project.X/dist/default/debug/PONG_project.X.debug.cof
Nov 23, 2017 12:08:00 PM

---  E:/3.46/pic18-lt/cxx-framework/src/traditional/stdclib/sincos.c  -----------------------------------
11C4  CFD9     MOVFF FSR2, POSTINC1
11C6  FFE6     NOP
11C8  CFDA     MOVFF FSR2H, POSTINC1
11CA  FFE6     NOP
11CC  CFE1     MOVFF FSR1, FSR2
11CE  FFD9     NOP
11D0  CFE2     MOVFF FSR1H, FSR2H
11D2  FFDA     NOP
11D4  0E22     MOVLW 0x22
11D6  24E1     ADDWF FSR1, W, ACCESS
11D8  E302     BNC 0x11DE
11DA  68E1     SETF FSR1, ACCESS
11DC  52E6     MOVF POSTINC1, F, ACCESS
11DE  6EE1     MOVWF FSR1, ACCESS
11E0  50D9     MOVF FSR2, W, ACCESS
11E2  0F13     ADDLW 0x13
11E4  6EE6     MOVWF POSTINC1, ACCESS
11E6  0E00     MOVLW 0x0
11E8  20DA     ADDWFC FSR2H, W, ACCESS
11EA  6EE6     MOVWF POSTINC1, ACCESS
11EC  DAA8     RCALL __pa_20
11EE  EC31     CALL 0x1A62, 0
11F0  F00D     NOP
11F2  6E00     MOVWF __tmp_0, ACCESS
11F4  0E06     MOVLW 0x6
11F6  5CE1     SUBWF FSR1, W, ACCESS
11F8  E202     BC 0x11FE
11FA  6AE1     CLRF FSR1, ACCESS
11FC  52E5     MOVF POSTDEC1, F, ACCESS
11FE  6EE1     MOVWF FSR1, ACCESS
1200  5000     MOVF __tmp_0, W, ACCESS
1202  6EE7     MOVWF INDF1, ACCESS
1204  0E0E     MOVLW 0xE
1206  CFE7     MOVFF INDF1, PLUSW2
1208  FFDB     NOP
173E  50D9     MOVF FSR2, W, ACCESS
1740  0FFA     ADDLW 0xFA
1742  6EE9     MOVWF FSR0, ACCESS
1744  0EFF     MOVLW 0xFF
1746  EF10     GOTO 0x1620
1748  F00B     NOP
120A  50DB     MOVF PLUSW2, W, ACCESS
120C  0B84     ANDLW 0x84
120E  E00C     BZ 0x1228
1210  0E21     MOVLW 0x21
1212  0100     MOVLB 0x0
1214  6F6C     MOVWF errno, BANKED
1216  6B6D     CLRF 0x6D, BANKED
1218  0E0F     MOVLW 0xF
121A  68DB     SETF PLUSW2, ACCESS
121C  0E10     MOVLW 0x10
121E  68DB     SETF PLUSW2, ACCESS
1220  0E11     MOVLW 0x11
1222  68DB     SETF PLUSW2, ACCESS
1224  0E7F     MOVLW 0x7F
1226  D06E     BRA 0x1304
1228  DA8A     RCALL __pa_20
122A  DA36     RCALL __pa_11
122C  0E02     MOVLW 0x2
122E  C01E     MOVFF RR, PLUSW2
1230  FFDB     NOP
1232  0E03     MOVLW 0x3
1234  C01F     MOVFF 0x1F, PLUSW2
1236  FFDB     NOP
1238  0E04     MOVLW 0x4
123A  C020     MOVFF 0x20, PLUSW2
123C  FFDB     NOP
123E  0E05     MOVLW 0x5
1240  C021     MOVFF 0x21, PLUSW2
1242  FFDB     NOP
1698  EC0E     CALL 0x1C1C, 0
169A  F00E     NOP
169C  52E5     MOVF POSTDEC1, F, ACCESS
169E  52E5     MOVF POSTDEC1, F, ACCESS
16A0  52E5     MOVF POSTDEC1, F, ACCESS
16A2  52E5     MOVF POSTDEC1, F, ACCESS
16A4  0012     RETURN 0
1244  DA87     RCALL __pa_22
1246  6A24     CLRF 0x24, ACCESS
1248  0E10     MOVLW 0x10
124A  6E25     MOVWF 0x25, ACCESS
124C  0E49     MOVLW 0x49
124E  6E26     MOVWF 0x26, ACCESS
1250  0E46     MOVLW 0x46
1252  DA14     RCALL __pa_9
1254  EC0C     CALL 0xE18, 0
1256  F007     NOP
1258  0A01     XORLW 0x1
125A  E032     BZ 0x12C0
167C  6E27     MOVWF 0x27, ACCESS
167E  C000     MOVFF __tmp_0, 0x1F
1680  F01F     NOP
1682  EF87     GOTO 0x170E
1684  F00B     NOP
170E  C001     MOVFF rand2, 0x20
1710  F020     NOP
1712  C002     MOVFF angle, 0x21
1714  F021     NOP
1716  C003     MOVFF 0x3, 0x22
1718  F022     NOP
171A  0012     RETURN 0
125C  DA7B     RCALL __pa_22
125E  DA67     RCALL __pa_19
1260  DA0D     RCALL __pa_9
1262  EC0B     CALL 0x1016, 0
1264  F008     NOP
1266  D9BF     RCALL __pa_2
172E  0EDB     MOVLW 0xDB
1730  6E24     MOVWF 0x24, ACCESS
1732  0E0F     MOVLW 0xF
1734  6E25     MOVWF 0x25, ACCESS
1736  0EC9     MOVLW 0xC9
1738  6E26     MOVWF 0x26, ACCESS
173A  0E40     MOVLW 0x40
173C  0012     RETURN 0
1268  0E06     MOVLW 0x6
126A  CFDB     MOVFF PLUSW2, 0x1F
126C  F01F     NOP
126E  0E07     MOVLW 0x7
1270  CFDB     MOVFF PLUSW2, 0x20
1272  F020     NOP
1274  0E08     MOVLW 0x8
1276  CFDB     MOVFF PLUSW2, 0x21
1278  F021     NOP
127A  0E09     MOVLW 0x9
127C  CFDB     MOVFF PLUSW2, 0x22
127E  F022     NOP
1280  EC8D     CALL 0x111A, 0
1282  F008     NOP
1284  ECF2     CALL 0xFE4, 0
1286  F007     NOP
1288  D9AE     RCALL __pa_2
128A  DA64     RCALL __pa_22
128C  0E06     MOVLW 0x6
128E  CFDB     MOVFF PLUSW2, 0x8
1290  F008     NOP
1292  0E07     MOVLW 0x7
1294  CFDB     MOVFF PLUSW2, 0x9
1296  F009     NOP
1298  0E08     MOVLW 0x8
129A  CFDB     MOVFF PLUSW2, f
129C  F00A     NOP
129E  0E09     MOVLW 0x9
12A0  CFDB     MOVFF PLUSW2, 0xB
12A2  F00B     NOP
12A4  DA44     RCALL __pa_19
12A6  6E27     MOVWF 0x27, ACCESS
12A8  C008     MOVFF 0x8, 0x1F
12AA  F01F     NOP
12AC  C009     MOVFF 0x9, 0x20
12AE  F020     NOP
12B0  C00A     MOVFF f, 0x21
12B2  F021     NOP
12B4  C00B     MOVFF 0xB, 0x22
12B6  F022     NOP
12B8  DA48     RCALL __pa_21
12BA  ECB2     CALL 0xB64, 0
12BC  F005     NOP
12BE  D9C4     RCALL __pa_7
160A  0E02     MOVLW 0x2
160C  CFDB     MOVFF PLUSW2, __tmp_0
160E  F000     NOP
1610  0E03     MOVLW 0x3
1612  CFDB     MOVFF PLUSW2, rand2
1614  F001     NOP
1616  0E04     MOVLW 0x4
1618  CFDB     MOVFF PLUSW2, angle
161A  F002     NOP
161C  0E05     MOVLW 0x5
161E  0012     RETURN 0
1648  0E02     MOVLW 0x2
164A  C01F     MOVFF 0x1F, PLUSW2
164C  FFDB     NOP
164E  0E03     MOVLW 0x3
1650  C020     MOVFF 0x20, PLUSW2
1652  FFDB     NOP
1654  0E04     MOVLW 0x4
1656  C021     MOVFF 0x21, PLUSW2
1658  FFDB     NOP
165A  0E05     MOVLW 0x5
165C  C022     MOVFF 0x22, PLUSW2
165E  FFDB     NOP
1660  0012     RETURN 0
174A  EC49     CALL 0xC92, 0
174C  F006     NOP
174E  DF73     RCALL __pa_6
1750  EF00     GOTO 0x1600
1752  F00B     NOP
1754  DF5A     RCALL __pa_4
1756  CFDB     MOVFF PLUSW2, 0x3
1758  F003     NOP
175A  0012     RETURN 0
12C0  0EF9     MOVLW 0xF9
12C2  50DB     MOVF PLUSW2, W, ACCESS
12C4  E012     BZ 0x12EA
12C6  0E0E     MOVLW 0xE
12C8  04DB     DECF PLUSW2, W, ACCESS
12CA  E10B     BNZ 0x12E2
12CC  0EFA     MOVLW 0xFA
12CE  CFDB     MOVFF PLUSW2, __tmp_0
12D0  F000     NOP
12D2  0EFB     MOVLW 0xFB
12D4  CFDB     MOVFF PLUSW2, rand2
12D6  F001     NOP
12D8  0EFC     MOVLW 0xFC
12DA  CFDB     MOVFF PLUSW2, angle
12DC  F002     NOP
12DE  0EFD     MOVLW 0xFD
12E0  D152     BRA 0x1586
12E2  D967     RCALL __pa_0
12E4  6A26     CLRF 0x26, ACCESS
12E6  D9F8     RCALL __pa_15
15B2  D87C     RCALL __pa_13
15B4  0E83     MOVLW 0x83
15B6  6E24     MOVWF 0x24, ACCESS
15B8  0EF9     MOVLW 0xF9
15BA  6E25     MOVWF 0x25, ACCESS
15BC  0EA2     MOVLW 0xA2
15BE  6E26     MOVWF 0x26, ACCESS
15C0  0E3E     MOVLW 0x3E
15C2  D8CF     RCALL __pa_24
15C4  6A24     CLRF 0x24, ACCESS
15C6  6A25     CLRF 0x25, ACCESS
15C8  0012     RETURN 0
16AC  0E02     MOVLW 0x2
16AE  CFDB     MOVFF PLUSW2, 0x4
16B0  F004     NOP
16B2  0E03     MOVLW 0x3
16B4  CFDB     MOVFF PLUSW2, 0x5
16B6  F005     NOP
16B8  0E04     MOVLW 0x4
16BA  CFDB     MOVFF PLUSW2, delta
16BC  F006     NOP
16BE  0E05     MOVLW 0x5
16C0  CFDB     MOVFF PLUSW2, 0x7
16C2  F007     NOP
16C4  0012     RETURN 0
16C6  C01F     MOVFF 0x1F, __tmp_0
16C8  F000     NOP
16CA  C020     MOVFF 0x20, rand2
16CC  F001     NOP
16CE  C021     MOVFF 0x21, angle
16D0  F002     NOP
16D2  C022     MOVFF 0x22, 0x3
16D4  F003     NOP
16D6  0012     RETURN 0
16D8  0E3F     MOVLW 0x3F
16DA  DFE5     RCALL __pa_12
16DC  EC5E     CALL 0x10BC, 0
16DE  F008     NOP
16E0  C020     MOVFF 0x20, POSTINC2
16E2  FFDE     NOP
16E4  C021     MOVFF 0x21, POSTDEC2
16E6  FFDD     NOP
16FC  C004     MOVFF 0x4, 0x1F
16FE  F01F     NOP
1700  C005     MOVFF 0x5, 0x20
1702  F020     NOP
1704  C006     MOVFF delta, 0x21
1706  F021     NOP
1708  C007     MOVFF 0x7, 0x22
170A  F022     NOP
170C  0012     RETURN 0
16E8  0E00     MOVLW 0x0
16EA  CFDF     MOVFF INDF2, 0x20
16EC  F020     NOP
16EE  0E01     MOVLW 0x1
16F0  CFDB     MOVFF PLUSW2, 0x21
16F2  F021     NOP
16F4  EC9F     CALL 0xB3E, 0
16F6  F005     NOP
16F8  EFF3     GOTO 0x15E6
16FA  F00A     NOP
12E8  D047     BRA 0x1378
12EA  0E0E     MOVLW 0xE
12EC  04DB     DECF PLUSW2, W, ACCESS
12EE  E119     BNZ 0x1322
12F0  0E0F     MOVLW 0xF
12F2  6ADB     CLRF PLUSW2, ACCESS
12F4  0E10     MOVLW 0x10
12F6  6ADB     CLRF PLUSW2, ACCESS
12F8  0E80     MOVLW 0x80
12FA  6EF3     MOVWF PROD, ACCESS
12FC  0E11     MOVLW 0x11
12FE  CFF3     MOVFF PROD, PLUSW2
1300  FFDB     NOP
1302  0E3F     MOVLW 0x3F
1304  6EF3     MOVWF PROD, ACCESS
1306  0E12     MOVLW 0x12
1308  CFF3     MOVFF PROD, PLUSW2
130A  FFDB     NOP
130C  0E0F     MOVLW 0xF
130E  CFDB     MOVFF PLUSW2, __tmp_0
1310  F000     NOP
1312  0E10     MOVLW 0x10
1314  CFDB     MOVFF PLUSW2, rand2
1316  F001     NOP
1318  0E11     MOVLW 0x11
131A  CFDB     MOVFF PLUSW2, angle
131C  F002     NOP
131E  0E12     MOVLW 0x12
1320  D132     BRA 0x1586
1322  0E19     MOVLW 0x19
1324  6ADB     CLRF PLUSW2, ACCESS
1326  D945     RCALL __pa_0
1328  0E80     MOVLW 0x80
132A  6E26     MOVWF 0x26, ACCESS
132C  D9D5     RCALL __pa_15
16A6  6E27     MOVWF 0x27, ACCESS
16A8  EFB3     GOTO 0xB66
16AA  F005     NOP
15E6  0E06     MOVLW 0x6
15E8  C01F     MOVFF 0x1F, PLUSW2
15EA  FFDB     NOP
15EC  0E07     MOVLW 0x7
15EE  C020     MOVFF 0x20, PLUSW2
15F0  FFDB     NOP
15F2  0E08     MOVLW 0x8
15F4  C021     MOVFF 0x21, PLUSW2
15F6  FFDB     NOP
15F8  0E09     MOVLW 0x9
15FA  C022     MOVFF 0x22, PLUSW2
15FC  FFDB     NOP
15FE  0012     RETURN 0
132E  6A00     CLRF __tmp_0, ACCESS
1330  6A01     CLRF rand2, ACCESS
1332  6A02     CLRF angle, ACCESS
1334  0E3F     MOVLW 0x3F
1336  6E03     MOVWF 0x3, ACCESS
1338  50D9     MOVF FSR2, W, ACCESS
133A  0F06     ADDLW 0x6
133C  6EE9     MOVWF FSR0, ACCESS
133E  0E00     MOVLW 0x0
1340  20DA     ADDWFC FSR2H, W, ACCESS
1342  6EEA     MOVWF FSR0H, ACCESS
1344  CFEE     MOVFF POSTINC0, 0x1F
1346  F01F     NOP
1348  CFEE     MOVFF POSTINC0, 0x20
134A  F020     NOP
134C  CFEE     MOVFF POSTINC0, 0x21
134E  F021     NOP
1350  CFEF     MOVFF INDF0, 0x22
1352  F022     NOP
1354  C000     MOVFF __tmp_0, 0x24
1356  F024     NOP
1358  C001     MOVFF rand2, 0x25
135A  F025     NOP
135C  C002     MOVFF angle, 0x26
135E  F026     NOP
1360  C003     MOVFF 0x3, 0x27
1362  F027     NOP
1364  ECB2     CALL 0xB64, 0
1366  F005     NOP
1368  C022     MOVFF 0x22, POSTDEC0
136A  FFED     NOP
136C  C021     MOVFF 0x21, POSTDEC0
136E  FFED     NOP
1370  C020     MOVFF 0x20, POSTDEC0
1372  FFED     NOP
1374  C01F     MOVFF 0x1F, INDF0
1376  FFEF     NOP
1378  50DF     MOVF INDF2, W, ACCESS
137A  0B01     ANDLW 0x1
137C  E00A     BZ 0x1392
137E  0E19     MOVLW 0x19
1380  50DB     MOVF PLUSW2, W, ACCESS
1382  E002     BZ 0x1388
1384  0E00     MOVLW 0x0
1386  D001     BRA 0x138A
1388  0E01     MOVLW 0x1
138A  6EE7     MOVWF INDF1, ACCESS
138C  0E19     MOVLW 0x19
138E  CFE7     MOVFF INDF1, PLUSW2
1390  FFDB     NOP
1392  D98C     RCALL __pa_13
1394  0E06     MOVLW 0x6
1396  CFDB     MOVFF PLUSW2, 0xC
1398  F00C     NOP
139A  0E07     MOVLW 0x7
139C  CFDB     MOVFF PLUSW2, 0xD
139E  F00D     NOP
13A0  0E08     MOVLW 0x8
13A2  CFDB     MOVFF PLUSW2, type
13A4  F00E     NOP
13A6  0E09     MOVLW 0x9
13A8  CFDB     MOVFF PLUSW2, Ret
13AA  F00F     NOP
13AC  6A24     CLRF 0x24, ACCESS
13AE  6A25     CLRF 0x25, ACCESS
13B0  0E49     MOVLW 0x49
13B2  6E26     MOVWF 0x26, ACCESS
13B4  0E40     MOVLW 0x40
13B6  6E27     MOVWF 0x27, ACCESS
13B8  C00C     MOVFF 0xC, 0x1F
13BA  F01F     NOP
13BC  C00D     MOVFF 0xD, 0x20
13BE  F020     NOP
13C0  C00E     MOVFF type, 0x21
13C2  F021     NOP
13C4  C00F     MOVFF Ret, 0x22
13C6  F022     NOP
13C8  EC49     CALL 0xC92, 0
13CA  F006     NOP
13CC  D95C     RCALL __pa_10
13CE  D9A6     RCALL __pa_18
13D0  D995     RCALL __pa_16
13D2  ECB2     CALL 0xB64, 0
13D4  F005     NOP
13D6  D977     RCALL __pa_14
13D8  0E06     MOVLW 0x6
13DA  CFDB     MOVFF PLUSW2, 0x14
13DC  F014     NOP
13DE  0E07     MOVLW 0x7
13E0  CFDB     MOVFF PLUSW2, 0x15
13E2  F015     NOP
13E4  0E08     MOVLW 0x8
13E6  CFDB     MOVFF PLUSW2, 0x16
13E8  F016     NOP
13EA  0E09     MOVLW 0x9
13EC  CFDB     MOVFF PLUSW2, 0x17
13EE  F017     NOP
13F0  0E22     MOVLW 0x22
13F2  6E24     MOVWF 0x24, ACCESS
13F4  0EAA     MOVLW 0xAA
13F6  6E25     MOVWF 0x25, ACCESS
13F8  0E7D     MOVLW 0x7D
13FA  6E26     MOVWF 0x26, ACCESS
13FC  0E3A     MOVLW 0x3A
13FE  6E27     MOVWF 0x27, ACCESS
1400  C014     MOVFF 0x14, 0x1F
1402  F01F     NOP
1404  C015     MOVFF 0x15, 0x20
1406  F020     NOP
1408  C016     MOVFF 0x16, 0x21
140A  F021     NOP
140C  C017     MOVFF 0x17, 0x22
140E  F022     NOP
1410  EC49     CALL 0xC92, 0
1412  F006     NOP
1414  C01F     MOVFF 0x1F, 0x10
1416  F010     NOP
1418  C020     MOVFF 0x20, 0x11
141A  F011     NOP
141C  C021     MOVFF 0x21, 0x12
141E  F012     NOP
1420  C022     MOVFF 0x22, xIEEE
1422  F013     NOP
1424  D8ED     RCALL __pa_3
1426  ECB2     CALL 0xB64, 0
1428  F005     NOP
142A  0E0A     MOVLW 0xA
142C  C01F     MOVFF 0x1F, PLUSW2
142E  FFDB     NOP
1430  0E0B     MOVLW 0xB
1432  C020     MOVFF 0x20, PLUSW2
1434  FFDB     NOP
1436  0E0C     MOVLW 0xC
1438  C021     MOVFF 0x21, PLUSW2
143A  FFDB     NOP
143C  0E0D     MOVLW 0xD
143E  C022     MOVFF 0x22, PLUSW2
1440  FFDB     NOP
1600  D88D     RCALL __pa_18
1602  C000     MOVFF __tmp_0, 0x1F
1604  F01F     NOP
1606  EF87     GOTO 0x170E
1608  F00B     NOP
1686  C01F     MOVFF 0x1F, 0x8
1688  F008     NOP
168A  C020     MOVFF 0x20, 0x9
168C  F009     NOP
168E  C021     MOVFF 0x21, f
1690  F00A     NOP
1692  C022     MOVFF 0x22, 0xB
1694  F00B     NOP
1696  0012     RETURN 0
171C  C01F     MOVFF 0x1F, 0x24
171E  F024     NOP
1720  C020     MOVFF 0x20, 0x25
1722  F025     NOP
1724  C021     MOVFF 0x21, 0x26
1726  F026     NOP
1728  C022     MOVFF 0x22, 0x27
172A  F027     NOP
172C  0012     RETURN 0
1442  50D9     MOVF FSR2, W, ACCESS
1444  0F0A     ADDLW 0xA
1446  6EE9     MOVWF FSR0, ACCESS
1448  0E00     MOVLW 0x0
144A  D8EA     RCALL __pa_5
144C  D925     RCALL __pa_11
144E  C01E     MOVFF RR, __tmp_0
1450  F000     NOP
1452  C01F     MOVFF 0x1F, rand2
1454  F001     NOP
1456  C020     MOVFF 0x20, angle
1458  F002     NOP
145A  C021     MOVFF 0x21, 0x3
145C  F003     NOP
145E  6A24     CLRF 0x24, ACCESS
1460  6A25     CLRF 0x25, ACCESS
1462  0E80     MOVLW 0x80
1464  6E26     MOVWF 0x26, ACCESS
1466  0E39     MOVLW 0x39
1468  6E27     MOVWF 0x27, ACCESS
146A  C01E     MOVFF RR, 0x1F
146C  F01F     NOP
146E  D94F     RCALL __pa_17
1470  EC0C     CALL 0xE18, 0
1472  F007     NOP
1474  0A01     XORLW 0x1
1476  E113     BNZ 0x149E
1620  20DA     ADDWFC FSR2H, W, ACCESS
1622  6EEA     MOVWF FSR0H, ACCESS
1624  CFEE     MOVFF POSTINC0, POSTINC1
1626  FFE6     NOP
1628  CFEE     MOVFF POSTINC0, POSTINC1
162A  FFE6     NOP
162C  CFEE     MOVFF POSTINC0, POSTINC1
162E  FFE6     NOP
1630  CFEF     MOVFF INDF0, POSTINC1
1632  FFE6     NOP
1634  0012     RETURN 0
1478  50D9     MOVF FSR2, W, ACCESS
147A  0F0A     ADDLW 0xA
147C  6EE9     MOVWF FSR0, ACCESS
147E  0E00     MOVLW 0x0
1480  20DA     ADDWFC FSR2H, W, ACCESS
1482  6EEA     MOVWF FSR0H, ACCESS
1484  0E02     MOVLW 0x2
1486  CFEE     MOVFF POSTINC0, PLUSW2
1488  FFDB     NOP
148A  0E03     MOVLW 0x3
148C  CFEE     MOVFF POSTINC0, PLUSW2
148E  FFDB     NOP
1490  0E04     MOVLW 0x4
1492  CFEE     MOVFF POSTINC0, PLUSW2
1494  FFDB     NOP
1496  0E05     MOVLW 0x5
1498  CFEE     MOVFF POSTINC0, PLUSW2
149A  FFDB     NOP
149C  D068     BRA 0x156E
149E  D8E1     RCALL __pa_8
14A0  0E0A     MOVLW 0xA
14A2  CFDB     MOVFF PLUSW2, 0x24
14A4  F024     NOP
14A6  0E0B     MOVLW 0xB
14A8  CFDB     MOVFF PLUSW2, 0x25
14AA  F025     NOP
14AC  0E0C     MOVLW 0xC
14AE  CFDB     MOVFF PLUSW2, 0x26
14B0  F026     NOP
14B2  0E0D     MOVLW 0xD
14B4  CFDB     MOVFF PLUSW2, 0x27
14B6  F027     NOP
14B8  EC49     CALL 0xC92, 0
14BA  F006     NOP
14BC  0E1A     MOVLW 0x1A
14BE  C01F     MOVFF 0x1F, PLUSW2
14C0  FFDB     NOP
14C2  0E1B     MOVLW 0x1B
14C4  C020     MOVFF 0x20, PLUSW2
14C6  FFDB     NOP
14C8  0E1C     MOVLW 0x1C
14CA  C021     MOVFF 0x21, PLUSW2
14CC  FFDB     NOP
14CE  0E1D     MOVLW 0x1D
14D0  C022     MOVFF 0x22, PLUSW2
14D2  FFDB     NOP
1662  0E0A     MOVLW 0xA
1664  CFDB     MOVFF PLUSW2, 0x1F
1666  F01F     NOP
1668  0E0B     MOVLW 0xB
166A  CFDB     MOVFF PLUSW2, 0x20
166C  F020     NOP
166E  0E0C     MOVLW 0xC
1670  CFDB     MOVFF PLUSW2, 0x21
1672  F021     NOP
1674  0E0D     MOVLW 0xD
1676  CFDB     MOVFF PLUSW2, 0x22
1678  F022     NOP
167A  0012     RETURN 0
14D4  0E5B     MOVLW 0x5B
14D6  6E1F     MOVWF 0x1F, ACCESS
14D8  0E9C     MOVLW 0x9C
14DA  6E20     MOVWF 0x20, ACCESS
14DC  0E2E     MOVLW 0x2E
14DE  6E21     MOVWF 0x21, ACCESS
14E0  0E36     MOVLW 0x36
14E2  6E22     MOVWF 0x22, ACCESS
14E4  D872     RCALL __pa_1
14E6  D8CF     RCALL __pa_10
14E8  0E22     MOVLW 0x22
14EA  6E24     MOVWF 0x24, ACCESS
14EC  0EB2     MOVLW 0xB2
14EE  6E25     MOVWF 0x25, ACCESS
14F0  0E4F     MOVLW 0x4F
14F2  6E26     MOVWF 0x26, ACCESS
14F4  0EB9     MOVLW 0xB9
14F6  D932     RCALL __pa_23
14F8  D89E     RCALL __pa_6
14FA  0E3E     MOVLW 0x3E
14FC  6E24     MOVWF 0x24, ACCESS
14FE  0E87     MOVLW 0x87
1500  6E25     MOVWF 0x25, ACCESS
1502  0E08     MOVLW 0x8
1504  6E26     MOVWF 0x26, ACCESS
1506  0E3C     MOVLW 0x3C
1508  D929     RCALL __pa_23
150A  D8DD     RCALL __pa_14
150C  0EA4     MOVLW 0xA4
150E  6E24     MOVWF 0x24, ACCESS
1510  0EAA     MOVLW 0xAA
1512  6E25     MOVWF 0x25, ACCESS
1514  0E2A     MOVLW 0x2A
1516  6E26     MOVWF 0x26, ACCESS
1518  0EBE     MOVLW 0xBE
151A  D920     RCALL __pa_23
151C  0E1E     MOVLW 0x1E
151E  C01F     MOVFF 0x1F, PLUSW2
1520  FFDB     NOP
1522  0E1F     MOVLW 0x1F
1524  C020     MOVFF 0x20, PLUSW2
1526  FFDB     NOP
1528  0E20     MOVLW 0x20
152A  C021     MOVFF 0x21, PLUSW2
152C  FFDB     NOP
152E  0E21     MOVLW 0x21
1530  C022     MOVFF 0x22, PLUSW2
1532  FFDB     NOP
15CA  0E1A     MOVLW 0x1A
15CC  CFDB     MOVFF PLUSW2, 0x24
15CE  F024     NOP
15D0  0E1B     MOVLW 0x1B
15D2  CFDB     MOVFF PLUSW2, 0x25
15D4  F025     NOP
15D6  0E1C     MOVLW 0x1C
15D8  CFDB     MOVFF PLUSW2, 0x26
15DA  F026     NOP
15DC  0E1D     MOVLW 0x1D
15DE  CFDB     MOVFF PLUSW2, 0x27
15E0  F027     NOP
15E2  EF49     GOTO 0xC92
15E4  F006     NOP
175C  DFA4     RCALL __pa_12
175E  EFE5     GOTO 0x15CA
1760  F00A     NOP
1534  0E0A     MOVLW 0xA
1536  CFDB     MOVFF PLUSW2, __tmp_0
1538  F000     NOP
153A  0E0B     MOVLW 0xB
153C  CFDB     MOVFF PLUSW2, rand2
153E  F001     NOP
1540  0E0C     MOVLW 0xC
1542  CFDB     MOVFF PLUSW2, angle
1544  F002     NOP
1546  0E0D     MOVLW 0xD
1548  CFDB     MOVFF PLUSW2, 0x3
154A  F003     NOP
154C  D88A     RCALL __pa_8
154E  0E1E     MOVLW 0x1E
1550  CFDB     MOVFF PLUSW2, 0x24
1552  F024     NOP
1554  0E1F     MOVLW 0x1F
1556  CFDB     MOVFF PLUSW2, 0x25
1558  F025     NOP
155A  0E20     MOVLW 0x20
155C  CFDB     MOVFF PLUSW2, 0x26
155E  F026     NOP
1560  0E21     MOVLW 0x21
1562  CFDB     MOVFF PLUSW2, 0x27
1564  F027     NOP
1566  D8F1     RCALL __pa_21
1568  ECB3     CALL 0xB66, 0
156A  F005     NOP
156C  D86D     RCALL __pa_7
1636  C01F     MOVFF 0x1F, 0x4
1638  F004     NOP
163A  C020     MOVFF 0x20, 0x5
163C  F005     NOP
163E  C021     MOVFF 0x21, delta
1640  F006     NOP
1642  C022     MOVFF 0x22, 0x7
1644  F007     NOP
1646  0012     RETURN 0
156E  0E19     MOVLW 0x19
1570  50DB     MOVF PLUSW2, W, ACCESS
1574  D89B     RCALL __pa_13
1572  E008     BZ 0x1584
1576  6A24     CLRF 0x24, ACCESS
1578  6A25     CLRF 0x25, ACCESS
157A  0E80     MOVLW 0x80
157C  6E26     MOVWF 0x26, ACCESS
157E  0EBF     MOVLW 0xBF
1580  D8F0     RCALL __pa_24
1582  D003     BRA 0x158A
1584  D842     RCALL __pa_4
1586  CFDB     MOVFF PLUSW2, 0x3
1588  F003     NOP
158A  C000     MOVFF __tmp_0, RR
158C  F01E     NOP
158E  C001     MOVFF rand2, 0x1F
1590  F01F     NOP
1592  C002     MOVFF angle, 0x20
1594  F020     NOP
1596  C003     MOVFF 0x3, 0x21
1598  F021     NOP
1762  6E27     MOVWF 0x27, ACCESS
1764  DFCB     RCALL __pa_16
1766  EC49     CALL 0xC92, 0
1768  F006     NOP
176A  EF63     GOTO 0x16C6
176C  F00B     NOP
159A  0E22     MOVLW 0x22
159C  5CE1     SUBWF FSR1, W, ACCESS
159E  E202     BC 0x15A4
15A0  6AE1     CLRF FSR1, ACCESS
15A2  52E5     MOVF POSTDEC1, F, ACCESS
15A4  6EE1     MOVWF FSR1, ACCESS
15A6  52E5     MOVF POSTDEC1, F, ACCESS
15A8  CFE5     MOVFF POSTDEC1, FSR2H
15AA  FFDA     NOP
15AC  CFE7     MOVFF INDF1, FSR2
15AE  FFD9     NOP
15B0  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/stdclib/sin.c  --------------------------------------
1C82  CFD9     MOVFF FSR2, POSTINC1
1C84  FFE6     NOP
1C86  CFDA     MOVFF FSR2H, POSTINC1
1C88  FFE6     NOP
1C8A  CFE1     MOVFF FSR1, FSR2
1C8C  FFD9     NOP
1C8E  CFE2     MOVFF FSR1H, FSR2H
1C90  FFDA     NOP
1C92  0E01     MOVLW 0x1
1C94  6EE6     MOVWF POSTINC1, ACCESS
1C96  50D9     MOVF FSR2, W, ACCESS
1C98  0FFA     ADDLW 0xFA
1C9A  6EE9     MOVWF FSR0, ACCESS
1C9C  0EFF     MOVLW 0xFF
1C9E  20DA     ADDWFC FSR2H, W, ACCESS
1CA0  6EEA     MOVWF FSR0H, ACCESS
1CA2  CFEE     MOVFF POSTINC0, POSTINC1
1CA4  FFE6     NOP
1CA6  CFEE     MOVFF POSTINC0, POSTINC1
1CA8  FFE6     NOP
1CAA  CFEE     MOVFF POSTINC0, POSTINC1
1CAC  FFE6     NOP
1CAE  CFEF     MOVFF INDF0, POSTINC1
1CB0  FFE6     NOP
1CB2  ECE2     CALL 0x11C4, 0
1CB4  F008     NOP
1CB6  6E00     MOVWF __tmp_0, ACCESS
1CB8  0E05     MOVLW 0x5
1CBA  5CE1     SUBWF FSR1, W, ACCESS
1CBC  E202     BC 0x1CC2
1CBE  6AE1     CLRF FSR1, ACCESS
1CC0  52E5     MOVF POSTDEC1, F, ACCESS
1CC2  6EE1     MOVWF FSR1, ACCESS
1CC4  5000     MOVF __tmp_0, W, ACCESS
1CC6  52E5     MOVF POSTDEC1, F, ACCESS
1CC8  CFE5     MOVFF POSTDEC1, FSR2H
1CCA  FFDA     NOP
1CCC  CFE7     MOVFF INDF1, FSR2
1CCE  FFD9     NOP
1CD0  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/stdclib/rand.asm  -----------------------------------
1D20  0EFE     MOVLW 0xFE
1D22  CFE3     MOVFF PLUSW1, Seed
1D24  F06A     NOP
1D26  0EFF     MOVLW 0xFF
1D28  CFE3     MOVFF PLUSW1, 0x6B
1D2A  F06B     NOP
1D2C  0012     RETURN 0
1D2E  C06B     MOVFF 0x6B, 0x21
1D30  F021     NOP
1D32  C06A     MOVFF Seed, 0x20
1D34  F020     NOP
1D36  0E35     MOVLW 0x35
1D38  6E25     MOVWF 0x25, ACCESS
1D3A  0E45     MOVLW 0x45
1D3C  6E26     MOVWF 0x26, ACCESS
1D3E  ECC4     CALL 0x1188, 0
1D40  F008     NOP
1D42  2A1E     INCF RR, F, ACCESS
1D44  6AE8     CLRF WREG, ACCESS
1D46  221F     ADDWFC 0x1F, F, ACCESS
1D48  9E1F     BCF 0x1F, 7, ACCESS
1D4A  C01F     MOVFF 0x1F, 0x6B
1D4C  F06B     NOP
1D4E  C01E     MOVFF RR, Seed
1D50  F06A     NOP
1D52  C06A     MOVFF Seed, PROD
1D54  FFF3     NOP
1D56  C06B     MOVFF 0x6B, PRODH
1D58  FFF4     NOP
1D5A  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/stdclib/fabs.c  -------------------------------------
1C1C  CFD9     MOVFF FSR2, POSTINC1
1C1E  FFE6     NOP
1C20  CFDA     MOVFF FSR2H, POSTINC1
1C22  FFE6     NOP
1C24  CFE1     MOVFF FSR1, FSR2
1C26  FFD9     NOP
1C28  CFE2     MOVFF FSR1H, FSR2H
1C2A  FFDA     NOP
1C2C  52E6     MOVF POSTINC1, F, ACCESS
1C2E  52E6     MOVF POSTINC1, F, ACCESS
1C30  50D9     MOVF FSR2, W, ACCESS
1C32  0FFD     ADDLW 0xFD
1C34  6E00     MOVWF __tmp_0, ACCESS
1C36  0EFF     MOVLW 0xFF
1C38  20DA     ADDWFC FSR2H, W, ACCESS
1C3A  C000     MOVFF __tmp_0, POSTINC2
1C3C  FFDE     NOP
1C3E  6EDD     MOVWF POSTDEC2, ACCESS
1C40  CFDE     MOVFF POSTINC2, FSR0
1C42  FFE9     NOP
1C44  CFDD     MOVFF POSTDEC2, FSR0H
1C46  FFEA     NOP
1C48  9EEF     BCF INDF0, 7, ACCESS
1C4A  0EFA     MOVLW 0xFA
1C4C  CFDB     MOVFF PLUSW2, __tmp_0
1C4E  F000     NOP
1C50  0EFB     MOVLW 0xFB
1C52  CFDB     MOVFF PLUSW2, rand2
1C54  F001     NOP
1C56  0EFC     MOVLW 0xFC
1C58  CFDB     MOVFF PLUSW2, angle
1C5A  F002     NOP
1C5C  0EFD     MOVLW 0xFD
1C5E  CFDB     MOVFF PLUSW2, 0x3
1C60  F003     NOP
1C62  C000     MOVFF __tmp_0, RR
1C64  F01E     NOP
1C66  C001     MOVFF rand2, 0x1F
1C68  F01F     NOP
1C6A  C002     MOVFF angle, 0x20
1C6C  F020     NOP
1C6E  C003     MOVFF 0x3, 0x21
1C70  F021     NOP
1C72  52E5     MOVF POSTDEC1, F, ACCESS
1C74  52E5     MOVF POSTDEC1, F, ACCESS
1C76  52E5     MOVF POSTDEC1, F, ACCESS
1C78  CFE5     MOVFF POSTDEC1, FSR2H
1C7A  FFDA     NOP
1C7C  CFE7     MOVFF INDF1, FSR2
1C7E  FFD9     NOP
1C80  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/stdclib/cos.c  --------------------------------------
1CD2  CFD9     MOVFF FSR2, POSTINC1
1CD4  FFE6     NOP
1CD6  CFDA     MOVFF FSR2H, POSTINC1
1CD8  FFE6     NOP
1CDA  CFE1     MOVFF FSR1, FSR2
1CDC  FFD9     NOP
1CDE  CFE2     MOVFF FSR1H, FSR2H
1CE0  FFDA     NOP
1CE2  6AE6     CLRF POSTINC1, ACCESS
1CE4  50D9     MOVF FSR2, W, ACCESS
1CE6  0FFA     ADDLW 0xFA
1CE8  6EE9     MOVWF FSR0, ACCESS
1CEA  0EFF     MOVLW 0xFF
1CEC  20DA     ADDWFC FSR2H, W, ACCESS
1CEE  6EEA     MOVWF FSR0H, ACCESS
1CF0  CFEE     MOVFF POSTINC0, POSTINC1
1CF2  FFE6     NOP
1CF4  CFEE     MOVFF POSTINC0, POSTINC1
1CF6  FFE6     NOP
1CF8  CFEE     MOVFF POSTINC0, POSTINC1
1CFA  FFE6     NOP
1CFC  CFEF     MOVFF INDF0, POSTINC1
1CFE  FFE6     NOP
1D00  ECE2     CALL 0x11C4, 0
1D02  F008     NOP
1D04  6E00     MOVWF __tmp_0, ACCESS
1D06  0E05     MOVLW 0x5
1D08  5CE1     SUBWF FSR1, W, ACCESS
1D0A  E202     BC 0x1D10
1D0C  6AE1     CLRF FSR1, ACCESS
1D0E  52E5     MOVF POSTDEC1, F, ACCESS
1D10  6EE1     MOVWF FSR1, ACCESS
1D12  5000     MOVF __tmp_0, W, ACCESS
1D14  52E5     MOVF POSTDEC1, F, ACCESS
1D16  CFE5     MOVFF POSTDEC1, FSR2H
1D18  FFDA     NOP
1D1A  CFE7     MOVFF INDF1, FSR2
1D1C  FFD9     NOP
1D1E  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/stdclib/__init.c  -----------------------------------
0006  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/stdclib/UnpkMath.c  ---------------------------------
1A62  CFD9     MOVFF FSR2, POSTINC1
1A64  FFE6     NOP
1A66  CFDA     MOVFF FSR2H, POSTINC1
1A68  FFE6     NOP
1A6A  CFE1     MOVFF FSR1, FSR2
1A6C  FFD9     NOP
1A6E  CFE2     MOVFF FSR1H, FSR2H
1A70  FFDA     NOP
1A72  52E6     MOVF POSTINC1, F, ACCESS
1A74  6800     SETF __tmp_0, ACCESS
1A76  6801     SETF rand2, ACCESS
1A78  0E7F     MOVLW 0x7F
1A7A  6E02     MOVWF angle, ACCESS
1A7C  6A03     CLRF 0x3, ACCESS
1A7E  50D9     MOVF FSR2, W, ACCESS
1A80  0FFA     ADDLW 0xFA
1A82  6EE9     MOVWF FSR0, ACCESS
1A84  0EFF     MOVLW 0xFF
1A86  20DA     ADDWFC FSR2H, W, ACCESS
1A88  6EEA     MOVWF FSR0H, ACCESS
1A8A  50EE     MOVF POSTINC0, W, ACCESS
1A8C  1600     ANDWF __tmp_0, F, ACCESS
1A8E  50EE     MOVF POSTINC0, W, ACCESS
1A90  1601     ANDWF rand2, F, ACCESS
1A92  50EE     MOVF POSTINC0, W, ACCESS
1A94  1602     ANDWF angle, F, ACCESS
1A96  50EE     MOVF POSTINC0, W, ACCESS
1A98  1603     ANDWF 0x3, F, ACCESS
1A9A  D86A     RCALL __pa_0
1A9C  C000     MOVFF __tmp_0, POSTINC0
1A9E  FFEE     NOP
1AA0  C001     MOVFF rand2, POSTINC0
1AA2  FFEE     NOP
1AA4  C002     MOVFF angle, POSTINC0
1AA6  FFEE     NOP
1AA8  C003     MOVFF 0x3, POSTINC0
1AAA  FFEE     NOP
1AAC  0EFD     MOVLW 0xFD
1AAE  50DB     MOVF PLUSW2, W, ACCESS
1ABC  D859     RCALL __pa_0
1ABE  0E06     MOVLW 0x6
1AC0  26E9     ADDWF FSR0, F, ACCESS
1AC2  0E00     MOVLW 0x0
1AC4  22EA     ADDWFC FSR0H, F, ACCESS
1AB0  0B80     ANDLW 0x80
1AB4  0E01     MOVLW 0x1
1AB2  E002     BZ 0x1AB8
1AB6  D001     BRA 0x1ABA
1AB8  0E00     MOVLW 0x0
1ABA  6EE6     MOVWF POSTINC1, ACCESS
1AC6  52E5     MOVF POSTDEC1, F, ACCESS
1AC8  50E7     MOVF INDF1, W, ACCESS
1ACA  6EEF     MOVWF INDF0, ACCESS
1ACC  0EFC     MOVLW 0xFC
1ACE  CFDB     MOVFF PLUSW2, __tmp_0
1AD0  F000     NOP
1AD2  0EFD     MOVLW 0xFD
1AD4  CFDB     MOVFF PLUSW2, rand2
1AD6  F001     NOP
1AD8  90D8     BCF STATUS, 0, ACCESS
1ADA  3600     RLCF __tmp_0, F, ACCESS
1ADC  3601     RLCF rand2, F, ACCESS
1ADE  0EFC     MOVLW 0xFC
1AE0  C000     MOVFF __tmp_0, PLUSW2
1AE2  FFDB     NOP
1AE4  0EFD     MOVLW 0xFD
1AE6  C001     MOVFF rand2, PLUSW2
1AE8  FFDB     NOP
1AEA  50DB     MOVF PLUSW2, W, ACCESS
1AEC  6EE6     MOVWF POSTINC1, ACCESS
1AEE  D840     RCALL __pa_0
1AF0  0E04     MOVLW 0x4
1AF2  26E9     ADDWF FSR0, F, ACCESS
1AF4  0E00     MOVLW 0x0
1AF6  22EA     ADDWFC FSR0H, F, ACCESS
1AF8  52E5     MOVF POSTDEC1, F, ACCESS
1AFA  50E7     MOVF INDF1, W, ACCESS
1AFC  6EEE     MOVWF POSTINC0, ACCESS
1AFE  6AED     CLRF POSTDEC0, ACCESS
1B00  0EFD     MOVLW 0xFD
1B02  50DB     MOVF PLUSW2, W, ACCESS
1B04  6E00     MOVWF __tmp_0, ACCESS
1B06  6A01     CLRF rand2, ACCESS
1B08  0EFF     MOVLW 0xFF
1B0A  1800     XORWF __tmp_0, W, ACCESS
1B0C  E118     BNZ 0x1B3E
1B0E  5001     MOVF rand2, W, ACCESS
1B10  E116     BNZ 0x1B3E
1B12  D82E     RCALL __pa_0
1B14  CFEE     MOVFF POSTINC0, __tmp_0
1B16  F000     NOP
1B18  CFEE     MOVFF POSTINC0, rand2
1B1A  F001     NOP
1B1C  CFEE     MOVFF POSTINC0, angle
1B1E  F002     NOP
1B20  CFEF     MOVFF INDF0, 0x3
1B22  F003     NOP
1B24  5000     MOVF __tmp_0, W, ACCESS
1B26  1001     IORWF rand2, W, ACCESS
1B28  1002     IORWF angle, W, ACCESS
1B2A  1003     IORWF 0x3, W, ACCESS
1B2C  E006     BZ 0x1B3A
1B2E  0E21     MOVLW 0x21
1B30  0100     MOVLB 0x0
1B32  6F6C     MOVWF errno, BANKED
1B34  6B6D     CLRF 0x6D, BANKED
1B36  0E80     MOVLW 0x80
1B38  D00B     BRA 0x1B50
1B3A  0E04     MOVLW 0x4
1B3C  D009     BRA 0x1B50
1B3E  0EFD     MOVLW 0xFD
1B40  50DB     MOVF PLUSW2, W, ACCESS
1B42  E108     BNZ 0x1B54
1B44  D815     RCALL __pa_0
1B46  6AEE     CLRF POSTINC0, ACCESS
1B48  6AEE     CLRF POSTINC0, ACCESS
1B4A  6AEE     CLRF POSTINC0, ACCESS
1B4C  6AEE     CLRF POSTINC0, ACCESS
1B4E  0E01     MOVLW 0x1
1B50  6EDF     MOVWF INDF2, ACCESS
1B52  D006     BRA 0x1B60
1B54  0E02     MOVLW 0x2
1B56  6EDF     MOVWF INDF2, ACCESS
1B58  D80B     RCALL __pa_0
1B5A  52EE     MOVF POSTINC0, F, ACCESS
1B5C  52EE     MOVF POSTINC0, F, ACCESS
1B5E  8EEE     BSF POSTINC0, 7, ACCESS
1B70  0EF8     MOVLW 0xF8
1B72  CFDB     MOVFF PLUSW2, FSR0
1B74  FFE9     NOP
1B76  0EF9     MOVLW 0xF9
1B78  CFDB     MOVFF PLUSW2, FSR0H
1B7A  FFEA     NOP
1B7C  0012     RETURN 0
1B60  50DF     MOVF INDF2, W, ACCESS
1B62  52E5     MOVF POSTDEC1, F, ACCESS
1B64  52E5     MOVF POSTDEC1, F, ACCESS
1B66  CFE5     MOVFF POSTDEC1, FSR2H
1B68  FFDA     NOP
1B6A  CFE7     MOVFF INDF1, FSR2
1B6C  FFD9     NOP
1B6E  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/startup/c018i.c  ------------------------------------
0000  EFD4     GOTO 0x1DA8
0002  F00E     NOP
0004  0012     RETURN 0
1DA8  EE1D     LFSR 1, 0xD00
1DAA  F000     NOP
1DAC  EE2D     LFSR 2, 0xD00
1DAE  F000     NOP
1DB0  6AF8     CLRF TBLPTRU, ACCESS
1DB2  9C19     BCF 0x19, 6, ACCESS
1DB4  ECBF     CALL 0x1B7E, 0
1DB6  F00D     NOP
1DB8  EC03     CALL 0x6, 0
1DBA  F000     NOP
1DBC  EC91     CALL 0x1922, 0
1DBE  F00C     NOP
1DC0  D7FB     BRA 0x1DB8
1DC2  0012     RETURN 0
1B7E  0E1E     MOVLW 0x1E
1B80  6EF6     MOVWF TBLPTR, ACCESS
1B82  0E00     MOVLW 0x0
1B84  6EF7     MOVWF TBLPTRH, ACCESS
1B86  0E00     MOVLW 0x0
1B88  6EF8     MOVWF TBLPTRU, ACCESS
1B8A  0100     MOVLB 0x0
1B8C  0009     TBLRD*+
1B8E  50F5     MOVF TABLAT, W, ACCESS
1B90  6F65     MOVWF curr_entry, BANKED
1B92  0009     TBLRD*+
1B94  50F5     MOVF TABLAT, W, ACCESS
1B96  6F66     MOVWF 0x66, BANKED
1B98  E103     BNZ 0x1BA0
1B9A  6765     TSTFSZ curr_entry, BANKED
1B9C  D001     BRA 0x1BA0
1B9E  D03D     BRA 0x1C1A
1BA0  0009     TBLRD*+
1BA2  50F5     MOVF TABLAT, W, ACCESS
1BA4  6F60     MOVWF prom, BANKED
1BA6  0009     TBLRD*+
1BA8  50F5     MOVF TABLAT, W, ACCESS
1BAA  6F61     MOVWF 0x61, BANKED
1BAC  0009     TBLRD*+
1BAE  50F5     MOVF TABLAT, W, ACCESS
1BB0  6F62     MOVWF 0x62, BANKED
1BB2  0009     TBLRD*+
1BB4  0009     TBLRD*+
1BB6  50F5     MOVF TABLAT, W, ACCESS
1BB8  6EE9     MOVWF FSR0, ACCESS
1BBA  0009     TBLRD*+
1BBC  50F5     MOVF TABLAT, W, ACCESS
1BBE  6EEA     MOVWF FSR0H, ACCESS
1BC0  0009     TBLRD*+
1BC2  0009     TBLRD*+
1BC4  0009     TBLRD*+
1BC6  50F5     MOVF TABLAT, W, ACCESS
1BC8  6F63     MOVWF curr_byte, BANKED
1BCA  0009     TBLRD*+
1BCC  50F5     MOVF TABLAT, W, ACCESS
1BCE  6F64     MOVWF 0x64, BANKED
1BD0  0009     TBLRD*+
1BD2  0009     TBLRD*+
1BD4  CFF6     MOVFF TBLPTR, data_ptr
1BD6  F067     NOP
1BD8  CFF7     MOVFF TBLPTRH, 0x68
1BDA  F068     NOP
1BDC  CFF8     MOVFF TBLPTRU, 0x69
1BDE  F069     NOP
1BE0  C060     MOVFF prom, TBLPTR
1BE2  FFF6     NOP
1BE4  C061     MOVFF 0x61, TBLPTRH
1BE6  FFF7     NOP
1BE8  C062     MOVFF 0x62, TBLPTRU
1BEA  FFF8     NOP
1BEC  0100     MOVLB 0x0
1BEE  5363     MOVF curr_byte, F, BANKED
1BF0  E102     BNZ 0x1BF6
1BF2  5364     MOVF 0x64, F, BANKED
1BF4  E007     BZ 0x1C04
1BF6  0009     TBLRD*+
1BF8  50F5     MOVF TABLAT, W, ACCESS
1BFA  6EEE     MOVWF POSTINC0, ACCESS
1BFC  0763     DECF curr_byte, F, BANKED
1BFE  E2F8     BC 0x1BF0
1C00  0764     DECF 0x64, F, BANKED
1C02  D7F9     BRA 0x1BF6
1C04  C067     MOVFF data_ptr, TBLPTR
1C06  FFF6     NOP
1C08  C068     MOVFF 0x68, TBLPTRH
1C0A  FFF7     NOP
1C0C  C069     MOVFF 0x69, TBLPTRU
1C0E  FFF8     NOP
1C10  0100     MOVLB 0x0
1C12  0765     DECF curr_entry, F, BANKED
1C14  0E00     MOVLW 0x0
1C16  5B66     SUBWFB 0x66, F, BANKED
1C18  D7BF     BRA 0x1B98
1C1A  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/proc/p18f87k22.asm  ---------------------------------
1D88  0E16     MOVLW 0x16
1D8A  6EF3     MOVWF PROD, ACCESS
1D8C  EE00     LFSR 0, 0x0
1D8E  F000     NOP
1D90  0E0F     MOVLW 0xF
1D92  D801     RCALL zero_block
1D94  0012     RETURN 0
1D96  60EA     CPFSLT FSR0H, ACCESS
1D98  D002     BRA compare_l
1D9A  6AEE     CLRF POSTINC0, ACCESS
1D9C  D7FC     BRA zero_block
1D9E  50F3     MOVF PROD, W, ACCESS
1DA0  60E9     CPFSLT FSR0, ACCESS
1DA2  0012     RETURN 0
1DA4  6AEE     CLRF POSTINC0, ACCESS
1DA6  D7FC     BRA loop_l
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/packFP.asm  ------------------------------------
0ED4  0E7F     MOVLW 0x7F
0ED6  6E22     MOVWF 0x22, ACCESS
0ED8  0EFF     MOVLW 0xFF
0EDA  6E21     MOVWF 0x21, ACCESS
0EDC  6E20     MOVWF 0x20, ACCESS
0EDE  6E1F     MOVWF 0x1F, ACCESS
0EE0  0012     RETURN 0
0EE2  0E7F     MOVLW 0x7F
0EE4  BE19     BTFSC 0x19, 7, ACCESS
0EE6  0EFF     MOVLW 0xFF
0EE8  6E22     MOVWF 0x22, ACCESS
0EEA  D002     BRA jReturnPosInf0
0EEC  0E7F     MOVLW 0x7F
0EEE  6E22     MOVWF 0x22, ACCESS
0EF0  0E80     MOVLW 0x80
0EF2  6E21     MOVWF 0x21, ACCESS
0EF4  6A20     CLRF 0x20, ACCESS
0EF6  6A1F     CLRF 0x1F, ACCESS
0EF8  D7F3     BRA __FpExit
0EFA  AE19     BTFSS 0x19, 7, ACCESS
0EFC  D004     BRA __FpReturnPosZero
0EFE  0E80     MOVLW 0x80
0F00  6E22     MOVWF 0x22, ACCESS
0F02  6A21     CLRF 0x21, ACCESS
0F04  D7F7     BRA jZero1and2
0F06  6A22     CLRF 0x22, ACCESS
0F08  6A21     CLRF 0x21, ACCESS
0F0A  D7F4     BRA jZero1and2
0F0C  501B     MOVF 0x1B, W, ACCESS
0F0E  101A     IORWF g, W, ACCESS
0F10  102B     IORWF 0x2B, W, ACCESS
0F12  102A     IORWF 0x2A, W, ACCESS
0F14  E0F8     BZ __FpReturnPosZero
0F16  BE1D     BTFSC 0x1D, 7, ACCESS
0F18  D7F0     BRA __FpReturnSignZero
0F1A  BE1B     BTFSC 0x1B, 7, ACCESS
0F1C  D00C     BRA jPkShiftDone
0F1E  501C     MOVF 0x1C, W, ACCESS
0F20  101D     IORWF 0x1D, W, ACCESS
0F22  E0EB     BZ __FpReturnSignZero
0F24  90D8     BCF STATUS, 0, ACCESS
0F26  362A     RLCF 0x2A, F, ACCESS
0F28  362B     RLCF 0x2B, F, ACCESS
0F2A  361A     RLCF g, F, ACCESS
0F2C  361B     RLCF 0x1B, F, ACCESS
0F2E  061C     DECF 0x1C, F, ACCESS
0F30  A0D8     BTFSS STATUS, 0, ACCESS
0F32  061D     DECF 0x1D, F, ACCESS
0F34  D7F2     BRA jPkLoop
0F36  501D     MOVF 0x1D, W, ACCESS
0F38  E1D4     BNZ __FpReturnSignInf
0F3A  281C     INCF 0x1C, W, ACCESS
0F3C  E0D2     BZ __FpReturnSignInf
0F3E  AE2A     BTFSS 0x2A, 7, ACCESS
0F40  D011     BRA jPkRoundDone
0F42  0E7F     MOVLW 0x7F
0F44  142A     ANDWF 0x2A, W, ACCESS
0F46  E102     BNZ jPkRoundIt
0F48  A02B     BTFSS 0x2B, 0, ACCESS
0F4A  D00C     BRA jPkRoundDone
0F4C  2A2B     INCF 0x2B, F, ACCESS
0F4E  6AE8     CLRF WREG, ACCESS
0F50  221A     ADDWFC g, F, ACCESS
0F52  221B     ADDWFC 0x1B, F, ACCESS
0F54  E307     BNC jPkRoundDone
0F56  80D8     BSF STATUS, 0, ACCESS
0F58  321B     RRCF 0x1B, F, ACCESS
0F5A  321A     RRCF g, F, ACCESS
0F5C  322B     RRCF 0x2B, F, ACCESS
0F5E  2A1C     INCF 0x1C, F, ACCESS
0F60  281C     INCF 0x1C, W, ACCESS
0F62  E0BF     BZ __FpReturnSignInf
0F64  501C     MOVF 0x1C, W, ACCESS
0F66  E0C9     BZ __FpReturnSignZero
0F68  C02B     MOVFF 0x2B, 0x1F
0F6A  F01F     NOP
0F6C  C01A     MOVFF g, 0x20
0F6E  F020     NOP
0F70  341B     RLCF 0x1B, W, ACCESS
0F72  6E21     MOVWF 0x21, ACCESS
0F74  301C     RRCF 0x1C, W, ACCESS
0F76  6E22     MOVWF 0x22, ACCESS
0F78  3221     RRCF 0x21, F, ACCESS
0F7A  9E22     BCF 0x22, 7, ACCESS
0F7C  BE19     BTFSC 0x19, 7, ACCESS
0F7E  8E22     BSF 0x22, 7, ACCESS
0F80  EF70     GOTO 0xEE0
0F82  F007     NOP
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/mulFP.asm  -------------------------------------
0C92  6A19     CLRF 0x19, ACCESS
0C94  ECC2     CALL 0xF84, 0
0C96  F007     NOP
0C98  ECDA     CALL 0xFB4, 0
0C9A  F007     NOP
0C9C  B619     BTFSC 0x19, 3, ACCESS
0C9E  EF6A     GOTO 0xED4
0CA0  F007     NOP
0CA2  A219     BTFSS 0x19, 1, ACCESS
0CA4  D005     BRA jANotInf
0CA6  B819     BTFSC 0x19, 4, ACCESS
0CA8  EF6A     GOTO 0xED4
0CAA  F007     NOP
0CAC  EF71     GOTO 0xEE2
0CAE  F007     NOP
0CB0  AA19     BTFSS 0x19, 5, ACCESS
0CB2  D005     BRA jBothFinite
0CB4  B019     BTFSC 0x19, 0, ACCESS
0CB6  EF6A     GOTO 0xED4
0CB8  F007     NOP
0CBA  EF71     GOTO 0xEE2
0CBC  F007     NOP
0CBE  B019     BTFSC 0x19, 0, ACCESS
0CC0  D002     BRA jHaveZero
0CC2  A819     BTFSS 0x19, 4, ACCESS
0CC4  D002     BRA jBothNotZero
0CC6  EF7D     GOTO 0xEFA
0CC8  F007     NOP
0CCA  6A1D     CLRF 0x1D, ACCESS
0CCC  5027     MOVF 0x27, W, ACCESS
0CCE  2422     ADDWF 0x22, W, ACCESS
0CD0  6E1C     MOVWF 0x1C, ACCESS
0CD2  6AE8     CLRF WREG, ACCESS
0CD4  221D     ADDWFC 0x1D, F, ACCESS
0CD6  0E7E     MOVLW 0x7E
0CD8  5E1C     SUBWF 0x1C, F, ACCESS
0CDA  6AE8     CLRF WREG, ACCESS
0CDC  5A1D     SUBWFB 0x1D, F, ACCESS
0CDE  6A2A     CLRF 0x2A, ACCESS
0CE0  6A2B     CLRF 0x2B, ACCESS
0CE2  6A1A     CLRF g, ACCESS
0CE4  6A1B     CLRF 0x1B, ACCESS
0CE6  5026     MOVF 0x26, W, ACCESS
0CE8  0221     MULWF 0x21, ACCESS
0CEA  CFF4     MOVFF PRODH, 0x1B
0CEC  F01B     NOP
0CEE  CFF3     MOVFF PROD, g
0CF0  F01A     NOP
0CF2  5025     MOVF 0x25, W, ACCESS
0CF4  0221     MULWF 0x21, ACCESS
0CF6  50F3     MOVF PROD, W, ACCESS
0CF8  262B     ADDWF 0x2B, F, ACCESS
0CFA  50F4     MOVF PRODH, W, ACCESS
0CFC  221A     ADDWFC g, F, ACCESS
0CFE  0E00     MOVLW 0x0
0D00  221B     ADDWFC 0x1B, F, ACCESS
0D02  5026     MOVF 0x26, W, ACCESS
0D04  0220     MULWF 0x20, ACCESS
0D06  50F3     MOVF PROD, W, ACCESS
0D08  262B     ADDWF 0x2B, F, ACCESS
0D0A  50F4     MOVF PRODH, W, ACCESS
0D0C  221A     ADDWFC g, F, ACCESS
0D0E  0E00     MOVLW 0x0
0D10  221B     ADDWFC 0x1B, F, ACCESS
0D12  5024     MOVF 0x24, W, ACCESS
0D14  0221     MULWF 0x21, ACCESS
0D16  50F3     MOVF PROD, W, ACCESS
0D18  262A     ADDWF 0x2A, F, ACCESS
0D1A  50F4     MOVF PRODH, W, ACCESS
0D1C  222B     ADDWFC 0x2B, F, ACCESS
0D1E  0E00     MOVLW 0x0
0D20  221A     ADDWFC g, F, ACCESS
0D22  221B     ADDWFC 0x1B, F, ACCESS
0D24  5025     MOVF 0x25, W, ACCESS
0D26  0220     MULWF 0x20, ACCESS
0D28  50F3     MOVF PROD, W, ACCESS
0D2A  262A     ADDWF 0x2A, F, ACCESS
0D2C  50F4     MOVF PRODH, W, ACCESS
0D2E  222B     ADDWFC 0x2B, F, ACCESS
0D30  0E00     MOVLW 0x0
0D32  221A     ADDWFC g, F, ACCESS
0D34  221B     ADDWFC 0x1B, F, ACCESS
0D36  5026     MOVF 0x26, W, ACCESS
0D38  021F     MULWF 0x1F, ACCESS
0D3A  50F3     MOVF PROD, W, ACCESS
0D3C  262A     ADDWF 0x2A, F, ACCESS
0D3E  50F4     MOVF PRODH, W, ACCESS
0D40  222B     ADDWFC 0x2B, F, ACCESS
0D42  0E00     MOVLW 0x0
0D44  221A     ADDWFC g, F, ACCESS
0D46  221B     ADDWFC 0x1B, F, ACCESS
0D48  5024     MOVF 0x24, W, ACCESS
0D4A  0220     MULWF 0x20, ACCESS
0D4C  50F4     MOVF PRODH, W, ACCESS
0D4E  262A     ADDWF 0x2A, F, ACCESS
0D50  0E00     MOVLW 0x0
0D52  222B     ADDWFC 0x2B, F, ACCESS
0D54  221A     ADDWFC g, F, ACCESS
0D56  221B     ADDWFC 0x1B, F, ACCESS
0D58  5025     MOVF 0x25, W, ACCESS
0D5A  021F     MULWF 0x1F, ACCESS
0D5C  50F4     MOVF PRODH, W, ACCESS
0D5E  262A     ADDWF 0x2A, F, ACCESS
0D60  0E00     MOVLW 0x0
0D62  222B     ADDWFC 0x2B, F, ACCESS
0D64  221A     ADDWFC g, F, ACCESS
0D66  221B     ADDWFC 0x1B, F, ACCESS
0D68  EF86     GOTO 0xF0C
0D6A  F007     NOP
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/ltFP.asm  --------------------------------------
0E18  EC15     CALL 0xE2A, 0
0E1A  F007     NOP
0E1C  B619     BTFSC 0x19, 3, ACCESS
0E1E  0C00     RETLW 0x0
0E20  B019     BTFSC 0x19, 0, ACCESS
0E22  0C00     RETLW 0x0
0E24  A419     BTFSS 0x19, 2, ACCESS
0E26  0C00     RETLW 0x0
0E28  0C01     RETLW 0x1
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/gtFP.asm  --------------------------------------
0E06  EC15     CALL 0xE2A, 0
0E08  F007     NOP
0E0A  B619     BTFSC 0x19, 3, ACCESS
0E0C  0C00     RETLW 0x0
0E0E  B019     BTFSC 0x19, 0, ACCESS
0E10  0C00     RETLW 0x0
0E12  B419     BTFSC 0x19, 2, ACCESS
0E14  0C00     RETLW 0x0
0E16  0C01     RETLW 0x1
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/fxm1616u.asm  ----------------------------------
1188  C020     MOVFF 0x20, 0x2A
118A  F02A     NOP
118C  5020     MOVF 0x20, W, ACCESS
118E  0225     MULWF 0x25, ACCESS
1190  CFF4     MOVFF PRODH, 0x1F
1192  F01F     NOP
1194  CFF3     MOVFF PROD, RR
1196  F01E     NOP
1198  5021     MOVF 0x21, W, ACCESS
119A  0226     MULWF 0x26, ACCESS
119C  CFF4     MOVFF PRODH, 0x21
119E  F021     NOP
11A0  CFF3     MOVFF PROD, 0x20
11A2  F020     NOP
11A4  0225     MULWF 0x25, ACCESS
11A6  50F3     MOVF PROD, W, ACCESS
11A8  261F     ADDWF 0x1F, F, ACCESS
11AA  50F4     MOVF PRODH, W, ACCESS
11AC  2220     ADDWFC 0x20, F, ACCESS
11AE  6AE8     CLRF WREG, ACCESS
11B0  2221     ADDWFC 0x21, F, ACCESS
11B2  502A     MOVF 0x2A, W, ACCESS
11B4  0226     MULWF 0x26, ACCESS
11B6  50F3     MOVF PROD, W, ACCESS
11B8  261F     ADDWF 0x1F, F, ACCESS
11BA  50F4     MOVF PRODH, W, ACCESS
11BC  2220     ADDWFC 0x20, F, ACCESS
11BE  6AE8     CLRF WREG, ACCESS
11C0  2221     ADDWFC 0x21, F, ACCESS
11C2  0C00     RETLW 0x0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/fxd1616u.c  ------------------------------------
1D5C  6A1D     CLRF 0x1D, ACCESS
1D5E  6A1C     CLRF 0x1C, ACCESS
1D60  0E10     MOVLW 0x10
1D62  6EE7     MOVWF INDF1, ACCESS
1D64  90D8     BCF STATUS, 0, ACCESS
1D66  3620     RLCF 0x20, F, ACCESS
1D68  3621     RLCF 0x21, F, ACCESS
1D6A  361C     RLCF 0x1C, F, ACCESS
1D6C  361D     RLCF 0x1D, F, ACCESS
1D6E  5025     MOVF 0x25, W, ACCESS
1D70  5C1C     SUBWF 0x1C, W, ACCESS
1D72  5026     MOVF 0x26, W, ACCESS
1D74  581D     SUBWFB 0x1D, W, ACCESS
1D76  E305     BNC 0x1D82
1D78  5025     MOVF 0x25, W, ACCESS
1D7A  5E1C     SUBWF 0x1C, F, ACCESS
1D7C  5026     MOVF 0x26, W, ACCESS
1D7E  5A1D     SUBWFB 0x1D, F, ACCESS
1D80  2A20     INCF 0x20, F, ACCESS
1D82  2EE7     DECFSZ INDF1, F, ACCESS
1D84  D7F0     BRA 0x1D66
1D86  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/fxd1616s.asm  ----------------------------------
0D6C  6A18     CLRF 0x18, ACCESS
0D6E  AE26     BTFSS 0x26, 7, ACCESS
0D70  EFBF     GOTO 0xD7E
0D72  F006     NOP
0D74  6C25     NEGF 0x25, ACCESS
0D76  1E26     COMF 0x26, F, ACCESS
0D78  6AE8     CLRF WREG, ACCESS
0D7A  2226     ADDWFC 0x26, F, ACCESS
0D7C  1E18     COMF 0x18, F, ACCESS
0D7E  AE21     BTFSS 0x21, 7, ACCESS
0D80  EFC7     GOTO 0xD8E
0D82  F006     NOP
0D84  6C20     NEGF 0x20, ACCESS
0D86  1E21     COMF 0x21, F, ACCESS
0D88  6AE8     CLRF WREG, ACCESS
0D8A  2221     ADDWFC 0x21, F, ACCESS
0D8C  1E18     COMF 0x18, F, ACCESS
0D8E  ECAE     CALL 0x1D5C, 0
0D90  F00E     NOP
0D92  BE21     BTFSC 0x21, 7, ACCESS
0D94  EFD7     GOTO 0xDAE
0D96  F006     NOP
0D98  AE18     BTFSS 0x18, 7, ACCESS
0D9A  0C00     RETLW 0x0
0D9C  6C20     NEGF 0x20, ACCESS
0D9E  1E21     COMF 0x21, F, ACCESS
0DA0  6AE8     CLRF WREG, ACCESS
0DA2  2221     ADDWFC 0x21, F, ACCESS
0DA4  6C1C     NEGF 0x1C, ACCESS
0DA6  1E1D     COMF 0x1D, F, ACCESS
0DA8  6AE8     CLRF WREG, ACCESS
0DAA  221D     ADDWFC 0x1D, F, ACCESS
0DAC  0C00     RETLW 0x0
0DAE  BE18     BTFSC 0x18, 7, ACCESS
0DB0  EFCE     GOTO 0xD9C
0DB2  F006     NOP
0DB4  8819     BSF 0x19, 4, ACCESS
0DB6  0CFF     RETLW 0xFF
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/divFP.asm  -------------------------------------
1016  6A19     CLRF 0x19, ACCESS
1018  ECC2     CALL 0xF84, 0
101A  F007     NOP
101C  ECDA     CALL 0xFB4, 0
101E  F007     NOP
1020  B619     BTFSC 0x19, 3, ACCESS
1022  EF6A     GOTO 0xED4
1024  F007     NOP
1026  A219     BTFSS 0x19, 1, ACCESS
1028  D005     BRA jANotInf
102A  BA19     BTFSC 0x19, 5, ACCESS
102C  EF6A     GOTO 0xED4
102E  F007     NOP
1030  EF71     GOTO 0xEE2
1032  F007     NOP
1034  BA19     BTFSC 0x19, 5, ACCESS
1036  EF7D     GOTO 0xEFA
1038  F007     NOP
103A  A019     BTFSS 0x19, 0, ACCESS
103C  D005     BRA jANotZero
103E  B819     BTFSC 0x19, 4, ACCESS
1040  EF6A     GOTO 0xED4
1042  F007     NOP
1044  EF7D     GOTO 0xEFA
1046  F007     NOP
1048  B819     BTFSC 0x19, 4, ACCESS
104A  EF71     GOTO 0xEE2
104C  F007     NOP
104E  6A1D     CLRF 0x1D, ACCESS
1050  0E7F     MOVLW 0x7F
1052  2422     ADDWF 0x22, W, ACCESS
1054  6E1C     MOVWF 0x1C, ACCESS
1056  6AE8     CLRF WREG, ACCESS
1058  221D     ADDWFC 0x1D, F, ACCESS
105A  5027     MOVF 0x27, W, ACCESS
105C  5E1C     SUBWF 0x1C, F, ACCESS
105E  6AE8     CLRF WREG, ACCESS
1060  5A1D     SUBWFB 0x1D, F, ACCESS
1062  0E1A     MOVLW 0x1A
1064  6E28     MOVWF 0x28, ACCESS
1066  6A22     CLRF 0x22, ACCESS
1068  6A2A     CLRF 0x2A, ACCESS
106A  6A2B     CLRF 0x2B, ACCESS
106C  6A1A     CLRF g, ACCESS
106E  6A1B     CLRF 0x1B, ACCESS
1070  5024     MOVF 0x24, W, ACCESS
1072  5E1F     SUBWF 0x1F, F, ACCESS
1074  5025     MOVF 0x25, W, ACCESS
1076  5A20     SUBWFB 0x20, F, ACCESS
1078  5026     MOVF 0x26, W, ACCESS
107A  5A21     SUBWFB 0x21, F, ACCESS
107C  0E00     MOVLW 0x0
107E  5A22     SUBWFB 0x22, F, ACCESS
1080  E709     BNN jNoAdjust
1082  5024     MOVF 0x24, W, ACCESS
1084  261F     ADDWF 0x1F, F, ACCESS
1086  5025     MOVF 0x25, W, ACCESS
1088  2220     ADDWFC 0x20, F, ACCESS
108A  5026     MOVF 0x26, W, ACCESS
108C  2221     ADDWFC 0x21, F, ACCESS
108E  0E00     MOVLW 0x0
1090  2222     ADDWFC 0x22, F, ACCESS
1092  D001     BRA jNext
1094  8A2A     BSF 0x2A, 5, ACCESS
1096  90D8     BCF STATUS, 0, ACCESS
1098  361F     RLCF 0x1F, F, ACCESS
109A  3620     RLCF 0x20, F, ACCESS
109C  3621     RLCF 0x21, F, ACCESS
109E  3622     RLCF 0x22, F, ACCESS
10A0  90D8     BCF STATUS, 0, ACCESS
10A2  362A     RLCF 0x2A, F, ACCESS
10A4  362B     RLCF 0x2B, F, ACCESS
10A6  361A     RLCF g, F, ACCESS
10A8  361B     RLCF 0x1B, F, ACCESS
10AA  2E28     DECFSZ 0x28, F, ACCESS
10AC  D7E1     BRA jLoop
10AE  5021     MOVF 0x21, W, ACCESS
10B0  1020     IORWF 0x20, W, ACCESS
10B2  101F     IORWF 0x1F, W, ACCESS
10B4  A4D8     BTFSS STATUS, 2, ACCESS
10B6  8A2A     BSF 0x2A, 5, ACCESS
10B8  EF86     GOTO 0xF0C
10BA  F007     NOP
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/compFP.asm  ------------------------------------
0E2A  6A19     CLRF 0x19, ACCESS
0E2C  ECC2     CALL 0xF84, 0
0E2E  F007     NOP
0E30  ECDA     CALL 0xFB4, 0
0E32  F007     NOP
0E34  B619     BTFSC 0x19, 3, ACCESS
0E36  0012     RETURN 0
0E38  AE19     BTFSS 0x19, 7, ACCESS
0E3A  D008     BRA jSignsEQ
0E3C  A019     BTFSS 0x19, 0, ACCESS
0E3E  D004     BRA jBothNotZero
0E40  A819     BTFSS 0x19, 4, ACCESS
0E42  D002     BRA jBothNotZero
0E44  8019     BSF 0x19, 0, ACCESS
0E46  0012     RETURN 0
0E48  9019     BCF 0x19, 0, ACCESS
0E4A  0012     RETURN 0
0E4C  5027     MOVF 0x27, W, ACCESS
0E4E  5C22     SUBWF 0x22, W, ACCESS
0E50  E10B     BNZ jNE
0E52  5026     MOVF 0x26, W, ACCESS
0E54  5C21     SUBWF 0x21, W, ACCESS
0E56  E108     BNZ jNE
0E58  5025     MOVF 0x25, W, ACCESS
0E5A  5C20     SUBWF 0x20, W, ACCESS
0E5C  E105     BNZ jNE
0E5E  5024     MOVF 0x24, W, ACCESS
0E60  5C1F     SUBWF 0x1F, W, ACCESS
0E62  E102     BNZ jNE
0E64  8019     BSF 0x19, 0, ACCESS
0E66  0012     RETURN 0
0E68  A0D8     BTFSS STATUS, 0, ACCESS
0E6A  D002     BRA jExch
0E6C  8E19     BSF 0x19, 7, ACCESS
0E6E  D010     BRA jNoExch
0E70  5022     MOVF 0x22, W, ACCESS
0E72  C027     MOVFF 0x27, 0x22
0E74  F022     NOP
0E76  6E27     MOVWF 0x27, ACCESS
0E78  5021     MOVF 0x21, W, ACCESS
0E7A  C026     MOVFF 0x26, 0x21
0E7C  F021     NOP
0E7E  6E26     MOVWF 0x26, ACCESS
0E80  5020     MOVF 0x20, W, ACCESS
0E82  C025     MOVFF 0x25, 0x20
0E84  F020     NOP
0E86  6E25     MOVWF 0x25, ACCESS
0E88  501F     MOVF 0x1F, W, ACCESS
0E8A  C024     MOVFF 0x24, 0x1F
0E8C  F01F     NOP
0E8E  6E24     MOVWF 0x24, ACCESS
0E90  5027     MOVF 0x27, W, ACCESS
0E92  5C22     SUBWF 0x22, W, ACCESS
0E94  E010     BZ jExpEQ
0E96  0FFF     ADDLW 0xFF
0E98  E009     BZ jShift
0E9A  9019     BCF 0x19, 0, ACCESS
0E9C  B419     BTFSC 0x19, 2, ACCESS
0E9E  D003     BRA jAisNeg
0EA0  AE19     BTFSS 0x19, 7, ACCESS
0EA2  8419     BSF 0x19, 2, ACCESS
0EA4  0012     RETURN 0
0EA6  AE19     BTFSS 0x19, 7, ACCESS
0EA8  9419     BCF 0x19, 2, ACCESS
0EAA  0012     RETURN 0
0EAC  2A27     INCF 0x27, F, ACCESS
0EAE  90D8     BCF STATUS, 0, ACCESS
0EB0  3226     RRCF 0x26, F, ACCESS
0EB2  3225     RRCF 0x25, F, ACCESS
0EB4  3224     RRCF 0x24, F, ACCESS
0EB6  5024     MOVF 0x24, W, ACCESS
0EB8  5E1F     SUBWF 0x1F, F, ACCESS
0EBA  5025     MOVF 0x25, W, ACCESS
0EBC  5A20     SUBWFB 0x20, F, ACCESS
0EBE  5026     MOVF 0x26, W, ACCESS
0EC0  5A21     SUBWFB 0x21, F, ACCESS
0EC2  BE21     BTFSC 0x21, 7, ACCESS
0EC4  D7EA     BRA jFinal
0EC6  90D8     BCF STATUS, 0, ACCESS
0EC8  361F     RLCF 0x1F, F, ACCESS
0ECA  3620     RLCF 0x20, F, ACCESS
0ECC  3621     RLCF 0x21, F, ACCESS
0ECE  2E22     DECFSZ 0x22, F, ACCESS
0ED0  D7F8     BRA jRotate
0ED2  D7C8     BRA jEQ
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/castFP32.asm  ----------------------------------
111A  6A19     CLRF 0x19, ACCESS
111C  ECC2     CALL 0xF84, 0
111E  F007     NOP
1120  B619     BTFSC 0x19, 3, ACCESS
1122  EF97     GOTO 0x112E
1124  F008     NOP
1126  A219     BTFSS 0x19, 1, ACCESS
1128  D00F     BRA jNotInf
112A  B419     BTFSC 0x19, 2, ACCESS
112C  D007     BRA jMaxNeg
112E  0E7F     MOVLW 0x7F
1130  6E21     MOVWF 0x21, ACCESS
1132  0EFF     MOVLW 0xFF
1134  6E20     MOVWF 0x20, ACCESS
1136  6E1F     MOVWF 0x1F, ACCESS
1138  6E1E     MOVWF RR, ACCESS
113A  D025     BRA jExit
113C  0E80     MOVLW 0x80
113E  6E21     MOVWF 0x21, ACCESS
1140  D001     BRA jWrZ123
1142  6A21     CLRF 0x21, ACCESS
1144  0E00     MOVLW 0x0
1146  D7F6     BRA jWr123
1148  B019     BTFSC 0x19, 0, ACCESS
114A  D7FB     BRA jZero
114C  6A1E     CLRF RR, ACCESS
114E  0E9F     MOVLW 0x9F
1150  6022     CPFSLT 0x22, ACCESS
1152  D7EB     BRA jMax
1154  0E7E     MOVLW 0x7E
1156  6422     CPFSGT 0x22, ACCESS
1158  D7F4     BRA jZero
115A  0E9E     MOVLW 0x9E
115C  5C22     SUBWF 0x22, W, ACCESS
115E  E007     BZ jLoopExit
1160  90D8     BCF STATUS, 0, ACCESS
1162  3221     RRCF 0x21, F, ACCESS
1164  3220     RRCF 0x20, F, ACCESS
1166  321F     RRCF 0x1F, F, ACCESS
1168  321E     RRCF RR, F, ACCESS
116A  2A22     INCF 0x22, F, ACCESS
116C  D7F6     BRA jLoop
116E  A419     BTFSS 0x19, 2, ACCESS
1170  D00A     BRA jExit
1172  6C1E     NEGF RR, ACCESS
1174  1E1F     COMF 0x1F, F, ACCESS
1176  1E20     COMF 0x20, F, ACCESS
1178  1E21     COMF 0x21, F, ACCESS
117A  6AE8     CLRF WREG, ACCESS
117C  221F     ADDWFC 0x1F, F, ACCESS
117E  2220     ADDWFC 0x20, F, ACCESS
1180  2221     ADDWFC 0x21, F, ACCESS
1182  AE21     BTFSS 0x21, 7, ACCESS
1184  D7DE     BRA jZero
1186  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/castFP16.asm  ----------------------------------
10BC  6A19     CLRF 0x19, ACCESS
10BE  ECC2     CALL 0xF84, 0
10C0  F007     NOP
10C2  B619     BTFSC 0x19, 3, ACCESS
10C4  EF68     GOTO 0x10D0
10C6  F008     NOP
10C8  A219     BTFSS 0x19, 1, ACCESS
10CA  D00E     BRA jNotInf
10CC  B419     BTFSC 0x19, 2, ACCESS
10CE  D005     BRA jMaxNeg
10D0  0E7F     MOVLW 0x7F
10D2  6E21     MOVWF 0x21, ACCESS
10D4  0EFF     MOVLW 0xFF
10D6  6E20     MOVWF 0x20, ACCESS
10D8  D01F     BRA jExit
10DA  0E80     MOVLW 0x80
10DC  6E21     MOVWF 0x21, ACCESS
10DE  6A20     CLRF 0x20, ACCESS
10E0  D01B     BRA jExit
10E2  6A21     CLRF 0x21, ACCESS
10E4  6A20     CLRF 0x20, ACCESS
10E6  D018     BRA jExit
10E8  B019     BTFSC 0x19, 0, ACCESS
10EA  D7FB     BRA jZero
10EC  0E8F     MOVLW 0x8F
10EE  6022     CPFSLT 0x22, ACCESS
10F0  D7ED     BRA jMax
10F2  0E7E     MOVLW 0x7E
10F4  6422     CPFSGT 0x22, ACCESS
10F6  D7F5     BRA jZero
10F8  0E8E     MOVLW 0x8E
10FA  5C22     SUBWF 0x22, W, ACCESS
10FC  E005     BZ jLoopExit
10FE  90D8     BCF STATUS, 0, ACCESS
1100  3221     RRCF 0x21, F, ACCESS
1102  3220     RRCF 0x20, F, ACCESS
1104  2A22     INCF 0x22, F, ACCESS
1106  D7F8     BRA jLoop
1108  A419     BTFSS 0x19, 2, ACCESS
110A  D006     BRA jExit
110C  6C20     NEGF 0x20, ACCESS
110E  1E21     COMF 0x21, F, ACCESS
1110  6AE8     CLRF WREG, ACCESS
1112  2221     ADDWFC 0x21, F, ACCESS
1114  AE21     BTFSS 0x21, 7, ACCESS
1116  D7E5     BRA jZero
1118  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/castFP08.asm  ----------------------------------
0DB8  6A19     CLRF 0x19, ACCESS
0DBA  ECC2     CALL 0xF84, 0
0DBC  F007     NOP
0DBE  B619     BTFSC 0x19, 3, ACCESS
0DC0  EFE6     GOTO 0xDCC
0DC2  F006     NOP
0DC4  A219     BTFSS 0x19, 1, ACCESS
0DC6  D00A     BRA jNotInf
0DC8  B419     BTFSC 0x19, 2, ACCESS
0DCA  D003     BRA jMaxNeg
0DCC  0E7F     MOVLW 0x7F
0DCE  6E21     MOVWF 0x21, ACCESS
0DD0  D019     BRA jExit
0DD2  0E80     MOVLW 0x80
0DD4  6E21     MOVWF 0x21, ACCESS
0DD6  D016     BRA jExit
0DD8  6A21     CLRF 0x21, ACCESS
0DDA  D014     BRA jExit
0DDC  B019     BTFSC 0x19, 0, ACCESS
0DDE  D7FC     BRA jZero
0DE0  0E87     MOVLW 0x87
0DE2  6022     CPFSLT 0x22, ACCESS
0DE4  D7F1     BRA jMax
0DE6  0E7E     MOVLW 0x7E
0DE8  6422     CPFSGT 0x22, ACCESS
0DEA  D7F6     BRA jZero
0DEC  0E86     MOVLW 0x86
0DEE  5C22     SUBWF 0x22, W, ACCESS
0DF0  E004     BZ jLoopExit
0DF2  90D8     BCF STATUS, 0, ACCESS
0DF4  3221     RRCF 0x21, F, ACCESS
0DF6  2A22     INCF 0x22, F, ACCESS
0DF8  D7F9     BRA jLoop
0DFA  A419     BTFSS 0x19, 2, ACCESS
0DFC  D003     BRA jExit
0DFE  6C21     NEGF 0x21, ACCESS
0E00  AE21     BTFSS 0x21, 7, ACCESS
0E02  D7EA     BRA jZero
0E04  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/cast32FP.asm  ----------------------------------
0FE0  9E19     BCF 0x19, 7, ACCESS
0FE2  D00C     BRA jI2F32Beg
0FE4  9E19     BCF 0x19, 7, ACCESS
0FE6  AE21     BTFSS 0x21, 7, ACCESS
0FE8  D009     BRA jI2F32Beg
0FEA  6C1E     NEGF RR, ACCESS
0FEC  1E1F     COMF 0x1F, F, ACCESS
0FEE  1E20     COMF 0x20, F, ACCESS
0FF0  1E21     COMF 0x21, F, ACCESS
0FF2  6AE8     CLRF WREG, ACCESS
0FF4  221F     ADDWFC 0x1F, F, ACCESS
0FF6  2220     ADDWFC 0x20, F, ACCESS
0FF8  2221     ADDWFC 0x21, F, ACCESS
0FFA  8E19     BSF 0x19, 7, ACCESS
0FFC  C021     MOVFF 0x21, 0x1B
0FFE  F01B     NOP
1000  C020     MOVFF 0x20, g
1002  F01A     NOP
1004  C01F     MOVFF 0x1F, 0x2B
1006  F02B     NOP
1008  C01E     MOVFF RR, 0x2A
100A  F02A     NOP
100C  0E9E     MOVLW 0x9E
100E  6E1C     MOVWF 0x1C, ACCESS
1010  6A1D     CLRF 0x1D, ACCESS
1012  EF86     GOTO 0xF0C
1014  F007     NOP
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/cast16FP.asm  ----------------------------------
0B3A  9E19     BCF 0x19, 7, ACCESS
0B3C  D008     BRA jI2F16Beg
0B3E  9E19     BCF 0x19, 7, ACCESS
0B40  AE21     BTFSS 0x21, 7, ACCESS
0B42  D005     BRA jI2F16Beg
0B44  6C20     NEGF 0x20, ACCESS
0B46  1E21     COMF 0x21, F, ACCESS
0B48  6AE8     CLRF WREG, ACCESS
0B4A  2221     ADDWFC 0x21, F, ACCESS
0B4C  8E19     BSF 0x19, 7, ACCESS
0B4E  C021     MOVFF 0x21, 0x1B
0B50  F01B     NOP
0B52  C020     MOVFF 0x20, g
0B54  F01A     NOP
0B56  6A2B     CLRF 0x2B, ACCESS
0B58  6A2A     CLRF 0x2A, ACCESS
0B5A  0E8E     MOVLW 0x8E
0B5C  6E1C     MOVWF 0x1C, ACCESS
0B5E  6A1D     CLRF 0x1D, ACCESS
0B60  EF86     GOTO 0xF0C
0B62  F007     NOP
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/cast08FP.asm  ----------------------------------
0B18  9E19     BCF 0x19, 7, ACCESS
0B1A  D005     BRA jI2F08Beg
0B1C  9E19     BCF 0x19, 7, ACCESS
0B1E  AE21     BTFSS 0x21, 7, ACCESS
0B20  D002     BRA jI2F08Beg
0B22  6C21     NEGF 0x21, ACCESS
0B24  8E19     BSF 0x19, 7, ACCESS
0B26  C021     MOVFF 0x21, 0x1B
0B28  F01B     NOP
0B2A  6A1A     CLRF g, ACCESS
0B2C  6A2B     CLRF 0x2B, ACCESS
0B2E  6A2A     CLRF 0x2A, ACCESS
0B30  0E86     MOVLW 0x86
0B32  6E1C     MOVWF 0x1C, ACCESS
0B34  6A1D     CLRF 0x1D, ACCESS
0B36  EF86     GOTO 0xF0C
0B38  F007     NOP
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/addFP.asm  -------------------------------------
0B64  7E27     BTG 0x27, 7, ACCESS
0B66  6A19     CLRF 0x19, ACCESS
0B68  ECC2     CALL 0xF84, 0
0B6A  F007     NOP
0B6C  ECDA     CALL 0xFB4, 0
0B6E  F007     NOP
0B70  B619     BTFSC 0x19, 3, ACCESS
0B72  EF6A     GOTO 0xED4
0B74  F007     NOP
0B76  A219     BTFSS 0x19, 1, ACCESS
0B78  D00A     BRA jANotInf
0B7A  AA19     BTFSS 0x19, 5, ACCESS
0B7C  D003     BRA jBANotInf
0B7E  BE19     BTFSC 0x19, 7, ACCESS
0B80  EF6A     GOTO 0xED4
0B82  F007     NOP
0B84  A419     BTFSS 0x19, 2, ACCESS
0B86  EF76     GOTO 0xEEC
0B88  F007     NOP
0B8A  EF73     GOTO 0xEE6
0B8C  F007     NOP
0B8E  AA19     BTFSS 0x19, 5, ACCESS
0B90  D005     BRA jBNotInf
0B92  AC19     BTFSS 0x19, 6, ACCESS
0B94  EF76     GOTO 0xEEC
0B96  F007     NOP
0B98  EF73     GOTO 0xEE6
0B9A  F007     NOP
0B9C  A019     BTFSS 0x19, 0, ACCESS
0B9E  D00A     BRA jNotBothZero
0BA0  A819     BTFSS 0x19, 4, ACCESS
0BA2  D008     BRA jNotBothZero
0BA4  BE19     BTFSC 0x19, 7, ACCESS
0BA6  D004     BRA jDifOrPosSign
0BA8  A419     BTFSS 0x19, 2, ACCESS
0BAA  D002     BRA jDifOrPosSign
0BAC  EF7F     GOTO 0xEFE
0BAE  F007     NOP
0BB0  EF83     GOTO 0xF06
0BB2  F007     NOP
0BB4  6A2A     CLRF 0x2A, ACCESS
0BB6  6A1D     CLRF 0x1D, ACCESS
0BB8  5027     MOVF 0x27, W, ACCESS
0BBA  5C22     SUBWF 0x22, W, ACCESS
0BBC  6E29     MOVWF 0x29, ACCESS
0BBE  E310     BNC jAltBexp
0BC0  C01F     MOVFF 0x1F, 0x2B
0BC2  F02B     NOP
0BC4  C020     MOVFF 0x20, g
0BC6  F01A     NOP
0BC8  C021     MOVFF 0x21, 0x1B
0BCA  F01B     NOP
0BCC  C022     MOVFF 0x22, 0x28
0BCE  F028     NOP
0BD0  C024     MOVFF 0x24, 0x1F
0BD2  F01F     NOP
0BD4  C025     MOVFF 0x25, 0x20
0BD6  F020     NOP
0BD8  C026     MOVFF 0x26, 0x21
0BDA  F021     NOP
0BDC  3A19     SWAPF 0x19, F, ACCESS
0BDE  D009     BRA jAandWsetup
0BE0  C024     MOVFF 0x24, 0x2B
0BE2  F02B     NOP
0BE4  C025     MOVFF 0x25, g
0BE6  F01A     NOP
0BE8  C026     MOVFF 0x26, 0x1B
0BEA  F01B     NOP
0BEC  C027     MOVFF 0x27, 0x28
0BEE  F028     NOP
0BF0  6C29     NEGF 0x29, ACCESS
0BF2  9E19     BCF 0x19, 7, ACCESS
0BF4  BC19     BTFSC 0x19, 6, ACCESS
0BF6  8E19     BSF 0x19, 7, ACCESS
0BF8  C028     MOVFF 0x28, 0x1C
0BFA  F01C     NOP
0BFC  B019     BTFSC 0x19, 0, ACCESS
0BFE  EFB2     GOTO 0xF64
0C00  F007     NOP
0C02  0E1A     MOVLW 0x1A
0C04  6029     CPFSLT 0x29, ACCESS
0C06  EFB2     GOTO 0xF64
0C08  F007     NOP
0C0A  6A1C     CLRF 0x1C, ACCESS
0C0C  6A22     CLRF 0x22, ACCESS
0C0E  A419     BTFSS 0x19, 2, ACCESS
0C10  D008     BRA jANotNeg
0C12  6C1F     NEGF 0x1F, ACCESS
0C14  1E20     COMF 0x20, F, ACCESS
0C16  1E21     COMF 0x21, F, ACCESS
0C18  1E22     COMF 0x22, F, ACCESS
0C1A  6AE8     CLRF WREG, ACCESS
0C1C  2220     ADDWFC 0x20, F, ACCESS
0C1E  2221     ADDWFC 0x21, F, ACCESS
0C20  2222     ADDWFC 0x22, F, ACCESS
0C22  AC19     BTFSS 0x19, 6, ACCESS
0C24  D008     BRA jWNotNeg
0C26  6C2B     NEGF 0x2B, ACCESS
0C28  1E1A     COMF g, F, ACCESS
0C2A  1E1B     COMF 0x1B, F, ACCESS
0C2C  1E1C     COMF 0x1C, F, ACCESS
0C2E  6AE8     CLRF WREG, ACCESS
0C30  221A     ADDWFC g, F, ACCESS
0C32  221B     ADDWFC 0x1B, F, ACCESS
0C34  221C     ADDWFC 0x1C, F, ACCESS
0C36  6A1E     CLRF RR, ACCESS
0C38  5229     MOVF 0x29, F, ACCESS
0C3A  E007     BZ jShiftDone
0C3C  3422     RLCF 0x22, W, ACCESS
0C3E  3221     RRCF 0x21, F, ACCESS
0C40  3220     RRCF 0x20, F, ACCESS
0C42  321F     RRCF 0x1F, F, ACCESS
0C44  321E     RRCF RR, F, ACCESS
0C46  2E29     DECFSZ 0x29, F, ACCESS
0C48  D7F9     BRA jShiftLoop
0C4A  501F     MOVF 0x1F, W, ACCESS
0C4C  262B     ADDWF 0x2B, F, ACCESS
0C4E  5020     MOVF 0x20, W, ACCESS
0C50  221A     ADDWFC g, F, ACCESS
0C52  5021     MOVF 0x21, W, ACCESS
0C54  221B     ADDWFC 0x1B, F, ACCESS
0C56  5022     MOVF 0x22, W, ACCESS
0C58  221C     ADDWFC 0x1C, F, ACCESS
0C5A  C01E     MOVFF RR, 0x2A
0C5C  F02A     NOP
0C5E  9E19     BCF 0x19, 7, ACCESS
0C60  AE1C     BTFSS 0x1C, 7, ACCESS
0C62  D00B     BRA jSignDone
0C64  6C2A     NEGF 0x2A, ACCESS
0C66  1E2B     COMF 0x2B, F, ACCESS
0C68  1E1A     COMF g, F, ACCESS
0C6A  1E1B     COMF 0x1B, F, ACCESS
0C6C  1E1C     COMF 0x1C, F, ACCESS
0C6E  6AE8     CLRF WREG, ACCESS
0C70  222B     ADDWFC 0x2B, F, ACCESS
0C72  221A     ADDWFC g, F, ACCESS
0C74  221B     ADDWFC 0x1B, F, ACCESS
0C76  221C     ADDWFC 0x1C, F, ACCESS
0C78  8E19     BSF 0x19, 7, ACCESS
0C7A  A01C     BTFSS 0x1C, 0, ACCESS
0C7C  D006     BRA jFinalSign
0C7E  80D8     BSF STATUS, 0, ACCESS
0C80  321B     RRCF 0x1B, F, ACCESS
0C82  321A     RRCF g, F, ACCESS
0C84  322B     RRCF 0x2B, F, ACCESS
0C86  322A     RRCF 0x2A, F, ACCESS
0C88  2A28     INCF 0x28, F, ACCESS
0C8A  C028     MOVFF 0x28, 0x1C
0C8C  F01C     NOP
0C8E  EF86     GOTO 0xF0C
0C90  F007     NOP
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/math/UnpackFP.asm  ----------------------------------
0F84  3621     RLCF 0x21, F, ACCESS
0F86  3622     RLCF 0x22, F, ACCESS
0F88  E302     BNC jUnpkA1
0F8A  8419     BSF 0x19, 2, ACCESS
0F8C  7E19     BTG 0x19, 7, ACCESS
0F8E  E106     BNZ jUnpkANZ
0F90  8019     BSF 0x19, 0, ACCESS
0F92  6A22     CLRF 0x22, ACCESS
0F94  6A21     CLRF 0x21, ACCESS
0F96  6A20     CLRF 0x20, ACCESS
0F98  6A1F     CLRF 0x1F, ACCESS
0F9A  0012     RETURN 0
0F9C  2822     INCF 0x22, W, ACCESS
0F9E  E003     BZ jUnpkA2
0FA0  80D8     BSF STATUS, 0, ACCESS
0FA2  3221     RRCF 0x21, F, ACCESS
0FA4  0012     RETURN 0
0FA6  90D8     BCF STATUS, 0, ACCESS
0FA8  3221     RRCF 0x21, F, ACCESS
0FAA  E102     BNZ jUnpkNaN
0FAC  8219     BSF 0x19, 1, ACCESS
0FAE  0012     RETURN 0
0FB0  8619     BSF 0x19, 3, ACCESS
0FB2  0012     RETURN 0
0FB4  3626     RLCF 0x26, F, ACCESS
0FB6  3627     RLCF 0x27, F, ACCESS
0FB8  E302     BNC jUnpkB1
0FBA  8C19     BSF 0x19, 6, ACCESS
0FBC  7E19     BTG 0x19, 7, ACCESS
0FBE  E106     BNZ jUnpkBNZ
0FC0  8819     BSF 0x19, 4, ACCESS
0FC2  6A27     CLRF 0x27, ACCESS
0FC4  6A26     CLRF 0x26, ACCESS
0FC6  6A25     CLRF 0x25, ACCESS
0FC8  6A24     CLRF 0x24, ACCESS
0FCA  0012     RETURN 0
0FCC  2827     INCF 0x27, W, ACCESS
0FCE  E003     BZ jUnpkB2
0FD0  80D8     BSF STATUS, 0, ACCESS
0FD2  3226     RRCF 0x26, F, ACCESS
0FD4  0012     RETURN 0
0FD6  90D8     BCF STATUS, 0, ACCESS
0FD8  3226     RRCF 0x26, F, ACCESS
0FDA  E1EA     BNZ jUnpkNaN
0FDC  8A19     BSF 0x19, 5, ACCESS
0FDE  0012     RETURN 0
---  E:/3.46/pic18-lt/cxx-framework/src/traditional/delays/d10tcyx.asm  ---------------------------------
1DC4  0EFF     MOVLW 0xFF
1DC6  50E3     MOVF PLUSW1, W, ACCESS
1DC8  4EE8     DCFSNZ WREG, F, ACCESS
1DCA  0012     RETURN 0
1DCC  0000     NOP
1DCE  D000     BRA _D10TCYXCODE_000C
1DD0  D000     BRA _D10TCYXCODE_000E
1DD2  D000     BRA D10_1
1DD4  2EE8     DECFSZ WREG, F, ACCESS
1DD6  D7FA     BRA D10x
1DD8  0012     RETURN 0
---  C:/Users/nickm/Documents/CU-Boulder Senior Year/ASEN 4419/Final Project/PONG_project.X/main.c  -----
1:             /* 
2:              * File:   main.c
3:              * Author: Nick
4:              *
5:              * Created on November 18, 2017, 2:16 PM
6:              */
7:             
8:             #include <p18cxxx.h>
9:             #include <delays.h>
10:            #include <p18f87k22.h>
11:            #include "GLCDroutinesEasyPic.h"
12:            #include "Pong_funcs.h"
13:            
14:            
15:            #pragma config FOSC=HS1, PWRTEN=ON, BOREN=ON, BORV=2, PLLCFG=OFF
16:            #pragma config WDTEN=OFF, CCP2MX=PORTC, XINST=OFF
17:            
18:            
19:            /******************************************************************************
20:             * Function prototypes
21:             ******************************************************************************/
22:            void Initial(void);         // Function to initialize hardware and interrupts
23:            void HiPriISR(void);        // this is just here for completeness
24:            void LoPriISR(void);
25:            
26:            #pragma code highVector=0x08
27:            void atHighVector(void)
28:            {
29:             _asm GOTO HiPriISR _endasm
0008  EFC8     GOTO 0x1990
000A  F00C     NOP
30:            }
000C  0012     RETURN 0
31:            #pragma code
32:            
33:            #pragma code lowVector=0x18
34:            void atLowVector(void)
35:            {
36:             _asm GOTO LoPriISR _endasm
0018  EFCF     GOTO 0x199E
001A  F00C     NOP
37:            }
001C  0012     RETURN 0
38:            #pragma code
39:            
40:            
41:            void main() {
42:                 Initial();                 // Initialize everything
1922  D805     RCALL Initial
43:                 while(1){   // this is the loop for the game
192C  D7FB     BRA 0x1924
44:                     update_paddles();
1924  ECED     CALL 0x5DA, 0
1926  F002     NOP
45:                     update_ball();
1928  EC22     CALL 0x244, 0
192A  F001     NOP
46:                     //Delay10KTCYx( 40 );
47:                 }
48:            }
49:            
50:            
51:            
52:            /******************************************************************************
53:             * Initial()
54:             *
55:             * This subroutine performs all initializations of variables and registers.
56:             * It enables TMR0 and sets CCP0 for compare if desired, and enables LoPri 
57:             * interrupts for both.
58:             ******************************************************************************/
59:            void Initial() {
60:                // Configure the IO ports
61:                TRISC  = 0b00000100;
192E  0E04     MOVLW 0x4
1930  6E94     MOVWF TRISC, ACCESS
62:                LATC = 0x00;
1932  6A8B     CLRF LATC, ACCESS
63:                TRISE = 0x00;
1934  6A96     CLRF TRISE, ACCESS
64:                LATE = 0x00;
1936  6A8D     CLRF LATE, ACCESS
65:                TRISAbits.TRISA4 = 1;    // make the "up" button for player 1 set to input
1938  8892     BSF TRISA, 4, ACCESS
66:                TRISAbits.TRISA5 = 1;    // make the "down" button for player 1 set to input 
193A  8A92     BSF TRISA, 5, ACCESS
67:                TRISJbits.TRISJ0 = 1;    // make the "up" button for player 2 set to input
193C  809A     BSF TRISJ, 0, ACCESS
68:                TRISJbits.TRISJ1 = 1;    // make the "down" button for player 2 set to input
193E  829A     BSF TRISJ, 1, ACCESS
69:                
70:                
71:                GLCD_CS0_TRIS = 0;
1940  9093     BCF TRISB, 0, ACCESS
72:                GLCD_CS1_TRIS = 0;
1942  9293     BCF TRISB, 1, ACCESS
73:                GLCD_RS_TRIS = 0;
1944  9493     BCF TRISB, 2, ACCESS
74:                GLCD_RW_TRIS = 0;
1946  9693     BCF TRISB, 3, ACCESS
75:                GLCD_E_TRIS = 0;
1948  9893     BCF TRISB, 4, ACCESS
76:                GLCD_RST_TRIS = 0;
194A  9A93     BCF TRISB, 5, ACCESS
77:                GLCD_DATA_TRIS = 0;
194C  6A95     CLRF TRISD, ACCESS
78:                
79:                
80:                
81:                InitGLCD();
194E  ECD6     CALL 0x17AC, 0
1950  F00B     NOP
82:                ClearGLCD();
1952  EC74     CALL 0x18E8, 0
1954  F00C     NOP
83:                Initial_ball();
1956  EC22     CALL 0x44, 0
1958  F000     NOP
84:                
85:                // interrupt stuff
86:                RCONbits.IPEN = 1;              // Enable priority levels
195A  8ED0     BSF RCON, 7, ACCESS
87:                
88:                
89:                // add in timer for the beginning of the game here
90:            
91:                
92:                
93:                // Now set up Timer1, This will be the delay timer in between ball position updates
94:                PIR1bits.TMR1IF = 0;   // clear the interrupt flag just to be sure
195C  909E     BCF PIR1, 0, ACCESS
95:                PIE1bits.TMR1IE = 1;   // enable interrupts for timer1
195E  809D     BSF PIE1, 0, ACCESS
96:                IPR1bits.TMR1IP = 0;  // assign low priority to timer1 interrupts
1960  909F     BCF IPR1, 0, ACCESS
97:                T1CONbits.T1CKPS0 = 1;
1962  88CD     BSF T1CON, 4, ACCESS
98:                T1CONbits.T1CKPS1 = 1;  // load a prescalar of 8 into the timer
1964  8ACD     BSF T1CON, 5, ACCESS
99:                TMR1H = 0x00;
1966  6ACF     CLRF TMR1H, ACCESS
100:               TMR1L = 0x00;   // clear the registers, High and then Low
1968  6ACE     CLRF TMR1, ACCESS
101:               INTCON = 0;    // clear INTCON
196A  6AF2     CLRF INTCON, ACCESS
102:               INTCONbits.GIEL = 1;            // Enable low-priority interrupts to CPU
196C  8CF2     BSF INTCON, 6, ACCESS
103:               INTCONbits.GIEH = 1;            // Enable all interrupts
196E  8EF2     BSF INTCON, 7, ACCESS
104:               T1CONbits.TMR1ON = 1;   // turn on the timer
1970  80CD     BSF T1CON, 0, ACCESS
105:               
106:               
107:               // PLAYER 1 PADDLE TIMER
108:               T3CONbits.T3CKPS0 = 1;
1972  88B1     BSF T3CON, 4, ACCESS
109:               T3CONbits.T3CKPS1 = 1;   // load prescalar of 8
1974  8AB1     BSF T3CON, 5, ACCESS
110:               TMR3H = 0;
1976  6AB3     CLRF TMR3H, ACCESS
111:               TMR3L = 0;
1978  6AB2     CLRF TMR3, ACCESS
112:               PIE2bits.TMR3IE = 1;     // enable interrupts for timer3
197A  82A0     BSF PIE2, 1, ACCESS
113:               PIR2bits.TMR3IF = 0;     // clear the interrupt flag, just to be sure
197C  92A1     BCF PIR2, 1, ACCESS
114:               IPR2bits.TMR3IP = 0;     // assign low priority to timer3
197E  92A2     BCF IPR2, 1, ACCESS
115:               
116:               
117:               // PLAYER 2 PADDLE TIMER
118:               T5CONbits.T5CKPS0 = 1;
1980  887B     BSF T5CON, 4, ACCESS
119:               T5CONbits.T5CKPS1 = 1;   // load prescalar of 8
1982  8A7B     BSF T5CON, 5, ACCESS
120:               TMR5H = 0;
1984  6A7D     CLRF TMR5H, ACCESS
121:               TMR5L = 0;
1986  6A7C     CLRF TMR5, ACCESS
122:               PIE5bits.TMR5IE = 1;     // enable interrupts for timer3
1988  82B9     BSF PIE5, 1, ACCESS
123:               PIR5bits.TMR5IF = 0;     // clear the interrupt flag, just to be sure
198A  92BA     BCF PIR5, 1, ACCESS
124:               IPR5bits.TMR5IP = 0;     // assign low priority to timer3
198C  92D2     BCF IPR5, 1, ACCESS
125:               
126:           }
198E  0012     RETURN 0
127:           
128:           
129:           /******************************************************************************
130:            * HiPriISR interrupt service routine
131:            *
132:            * Included to show form, does nothing
133:            ******************************************************************************/
134:           #pragma interrupt HiPriISR
135:           void HiPriISR() {
1990  CFDA     MOVFF FSR2H, PREINC1
1992  FFE4     NOP
1994  52E6     MOVF POSTINC1, F, ACCESS
136:               
137:           }	// Supports retfie FAST automatically
1996  52E5     MOVF POSTDEC1, F, ACCESS
1998  CFE5     MOVFF POSTDEC1, FSR2H
199A  FFDA     NOP
199C  0011     RETFIE 1
138:           
139:           /******************************************************************************
140:            * LoPriISR interrupt service routine
141:            *
142:            * Calls the individual interrupt routines. It sits in a loop calling the required
143:            * handler functions until until TMR1IF and CCP1IF are clear.
144:            ******************************************************************************/
145:           #pragma interruptlow LoPriISR 
146:           void LoPriISR() {
199E  CFD8     MOVFF STATUS, PREINC1
19A0  FFE4     NOP
19A2  CFE0     MOVFF BSR, PREINC1
19A4  FFE4     NOP
19A6  6EE4     MOVWF PREINC1, ACCESS
19A8  CFDA     MOVFF FSR2H, PREINC1
19AA  FFE4     NOP
19AC  CFE2     MOVFF FSR1H, FSR2H
19AE  FFDA     NOP
19B0  CFE9     MOVFF FSR0, PREINC1
19B2  FFE4     NOP
19B4  CFEA     MOVFF FSR0H, PREINC1
19B6  FFE4     NOP
19B8  CFF6     MOVFF TBLPTR, PREINC1
19BA  FFE4     NOP
19BC  CFF7     MOVFF TBLPTRH, PREINC1
19BE  FFE4     NOP
19C0  CFF5     MOVFF TABLAT, PREINC1
19C2  FFE4     NOP
19C4  CFF3     MOVFF PROD, PREINC1
19C6  FFE4     NOP
19C8  CFF4     MOVFF PRODH, PREINC1
19CA  FFE4     NOP
19CC  CFFA     MOVFF PCLATH, PREINC1
19CE  FFE4     NOP
19D0  EE00     LFSR 0, 0x18
19D2  F018     NOP
19D4  0E14     MOVLW 0x14
19D6  04E8     DECF WREG, W, ACCESS
19D8  E303     BNC 0x19E0
19DA  CFEE     MOVFF POSTINC0, PREINC1
19DC  FFE4     NOP
19DE  D7FB     BRA 0x19D6
19E0  EE00     LFSR 0, 0x0
19E2  F000     NOP
19E4  0E18     MOVLW 0x18
19E6  04E8     DECF WREG, W, ACCESS
19E8  E303     BNC 0x19F0
19EA  CFEE     MOVFF POSTINC0, PREINC1
19EC  FFE4     NOP
19EE  D7FB     BRA 0x19E6
19F0  52E6     MOVF POSTINC1, F, ACCESS
147:               while(1) {
148:                   if( PIR1bits.TMR1IF ) { //Check if ball movement timer flag is set
19F2  A09E     BTFSS PIR1, 0, ACCESS
19F4  D003     BRA 0x19FC
149:                       TMR1handler();
19F6  EC17     CALL 0x62E, 0
19F8  F003     NOP
150:                       continue;
19FA  D7FB     BRA 0x19F2
151:                   }
152:                   if ( PIR2bits.TMR3IF){  // check if player 1 paddle timer is set
19FC  A2A1     BTFSS PIR2, 1, ACCESS
19FE  D003     BRA 0x1A06
153:                       TMR3handler();
1A00  EC1F     CALL 0x63E, 0
1A02  F003     NOP
154:                       continue;
1A04  D7F6     BRA 0x19F2
155:                   }
156:                   if (PIR5bits.TMR5IF) {  // check if player 2 paddle timer flag is set
1A06  A2BA     BTFSS PIR5, 1, ACCESS
1A08  D003     BRA 0x1A10
157:                       TMR5handler();
1A0A  EC44     CALL 0x688, 0
1A0C  F003     NOP
158:                       continue;
1A0E  D7F1     BRA 0x19F2
159:                   }
160:                   break;
161:               }
162:           }
1A10  52E5     MOVF POSTDEC1, F, ACCESS
1A12  EE00     LFSR 0, 0x17
1A14  F017     NOP
1A16  0E18     MOVLW 0x18
1A18  04E8     DECF WREG, W, ACCESS
1A1A  E303     BNC 0x1A22
1A1C  CFE5     MOVFF POSTDEC1, POSTDEC0
1A1E  FFED     NOP
1A20  D7FB     BRA 0x1A18
1A22  EE00     LFSR 0, 0x2B
1A24  F02B     NOP
1A26  0E14     MOVLW 0x14
1A28  04E8     DECF WREG, W, ACCESS
1A2A  E303     BNC 0x1A32
1A2C  CFE5     MOVFF POSTDEC1, POSTDEC0
1A2E  FFED     NOP
1A30  D7FB     BRA 0x1A28
1A32  CFE5     MOVFF POSTDEC1, PCLATH
1A34  FFFA     NOP
1A36  CFE5     MOVFF POSTDEC1, PRODH
1A38  FFF4     NOP
1A3A  CFE5     MOVFF POSTDEC1, PROD
1A3C  FFF3     NOP
1A3E  CFE5     MOVFF POSTDEC1, TABLAT
1A40  FFF5     NOP
1A42  CFE5     MOVFF POSTDEC1, TBLPTRH
1A44  FFF7     NOP
1A46  CFE5     MOVFF POSTDEC1, TBLPTR
1A48  FFF6     NOP
1A4A  CFE5     MOVFF POSTDEC1, FSR0H
1A4C  FFEA     NOP
1A4E  CFE5     MOVFF POSTDEC1, FSR0
1A50  FFE9     NOP
1A52  CFE5     MOVFF POSTDEC1, FSR2H
1A54  FFDA     NOP
1A56  50E5     MOVF POSTDEC1, W, ACCESS
1A58  CFE5     MOVFF POSTDEC1, BSR
1A5A  FFE0     NOP
1A5C  CFE5     MOVFF POSTDEC1, STATUS
1A5E  FFD8     NOP
1A60  0010     RETFIE 0
163:           
164:           
165:           
166:           
167:           
---  C:/Users/nickm/Documents/CU-Boulder Senior Year/ASEN 4419/Final Project/PONG_project.X/Pong_funcs.c  
1:             #include <delays.h>
2:             #include <string.h>
3:             #include "GLCDroutinesEasyPic.h"
4:             #include "Pong_funcs.h"
5:             #include <stdio.h>
6:             #include <stdlib.h>  // these last two are so that we can make random numbers
7:             #include <math.h>
8:             #include <p18f87k22.h>
9:             
10:            #define deg_to_rad 0.01745
11:            #define max_y 63
12:            #define max_x 127
13:            #define min_x 2
14:            #define scale 1
15:            #define ball_low_byte 0x00
16:            #define ball_high_byte 0x70    // this seems the best with 0xD0
17:            #define paddle_min 24
18:            #define paddle_max 39
19:            #define paddle_tmr_high 0x00
20:            #define paddle_tmr_low 0x00
21:            
22:            struct ball_struct ball;
23:            unsigned char player1_points = 0;
24:            unsigned char player2_points = 0;
25:            unsigned char paddle1min = paddle_min;   // This is the bottom value for player 1's paddle
26:            unsigned char paddle1max = paddle_max;   // This is the top value for player 1's paddle
27:            unsigned char paddle2min = paddle_min;
28:            unsigned char paddle2max = paddle_max;   // Keep in mind these are not constants, just the starting positions
29:            unsigned char paddle1 = 0;   // this means that player 1 has pressed neither button 
30:            unsigned char paddle2 = 0;   // this means that player 2 has pressed neither button
31:            
32:            
33:            void Initial_ball() {
0044  CFD9     MOVFF FSR2, POSTINC1
0046  FFE6     NOP
0048  CFE1     MOVFF FSR1, FSR2
004A  FFD9     NOP
004C  0E0A     MOVLW 0xA
004E  26E1     ADDWF FSR1, F, ACCESS
34:                char rand1, rand2;
35:                float angle, delta;
36:                rand1 = rand() % 2;
0050  EC97     CALL 0x1D2E, 0
0052  F00E     NOP
0054  CFF3     MOVFF PROD, __tmp_0
0056  F000     NOP
0058  CFF4     MOVFF PRODH, rand2
005A  F001     NOP
005C  0E02     MOVLW 0x2
005E  6E25     MOVWF 0x25, ACCESS
0060  6A26     CLRF 0x26, ACCESS
0062  CFF3     MOVFF PROD, 0x20
0064  F020     NOP
0066  CFF4     MOVFF PRODH, 0x21
0068  F021     NOP
006A  ECB6     CALL 0xD6C, 0
006C  F006     NOP
006E  C01C     MOVFF 0x1C, __tmp_0
0070  F000     NOP
0072  C01D     MOVFF 0x1D, rand2
0074  F001     NOP
0076  501C     MOVF 0x1C, W, ACCESS
0078  6EDF     MOVWF INDF2, ACCESS
37:                rand2 = rand() % 2;
007A  EC97     CALL 0x1D2E, 0
007C  F00E     NOP
007E  CFF3     MOVFF PROD, __tmp_0
0080  F000     NOP
0082  CFF4     MOVFF PRODH, rand2
0084  F001     NOP
0086  0E02     MOVLW 0x2
0088  6E25     MOVWF 0x25, ACCESS
008A  6A26     CLRF 0x26, ACCESS
008C  CFF3     MOVFF PROD, 0x20
008E  F020     NOP
0090  CFF4     MOVFF PRODH, 0x21
0092  F021     NOP
0094  ECB6     CALL 0xD6C, 0
0096  F006     NOP
0098  C01C     MOVFF 0x1C, __tmp_0
009A  F000     NOP
009C  C01D     MOVFF 0x1D, rand2
009E  F001     NOP
00A0  0E01     MOVLW 0x1
00A2  C01C     MOVFF 0x1C, PLUSW2
00A4  FFDB     NOP
38:                if (rand1)
00A6  50DF     MOVF INDF2, W, ACCESS
00A8  E00F     BZ 0xC8
39:                    angle = 180;
00AA  0E02     MOVLW 0x2
00AC  6ADB     CLRF PLUSW2, ACCESS
00AE  0E03     MOVLW 0x3
00B0  6ADB     CLRF PLUSW2, ACCESS
00B2  0E34     MOVLW 0x34
00B4  6EF3     MOVWF PROD, ACCESS
00B6  0E04     MOVLW 0x4
00B8  CFF3     MOVFF PROD, PLUSW2
00BA  FFDB     NOP
00BC  0E43     MOVLW 0x43
00BE  6EF3     MOVWF PROD, ACCESS
00C0  0E05     MOVLW 0x5
00C2  CFF3     MOVFF PROD, PLUSW2
00C4  FFDB     NOP
40:                else
00C6  D008     BRA 0xD8
41:                    angle = 0;
00C8  0E02     MOVLW 0x2
00CA  6ADB     CLRF PLUSW2, ACCESS
00CC  0E03     MOVLW 0x3
00CE  6ADB     CLRF PLUSW2, ACCESS
00D0  0E04     MOVLW 0x4
00D2  6ADB     CLRF PLUSW2, ACCESS
00D4  0E05     MOVLW 0x5
00D6  6ADB     CLRF PLUSW2, ACCESS
42:                delta = rand() % 50;
00D8  EC97     CALL 0x1D2E, 0
00DA  F00E     NOP
00DC  CFF3     MOVFF PROD, __tmp_0
00DE  F000     NOP
00E0  CFF4     MOVFF PRODH, rand2
00E2  F001     NOP
00E4  0E32     MOVLW 0x32
00E6  6E25     MOVWF 0x25, ACCESS
00E8  6A26     CLRF 0x26, ACCESS
00EA  CFF3     MOVFF PROD, 0x20
00EC  F020     NOP
00EE  CFF4     MOVFF PRODH, 0x21
00F0  F021     NOP
00F2  ECB6     CALL 0xD6C, 0
00F4  F006     NOP
00F6  C01C     MOVFF 0x1C, __tmp_0
00F8  F000     NOP
00FA  C01D     MOVFF 0x1D, rand2
00FC  F001     NOP
00FE  C01C     MOVFF 0x1C, 0x20
0100  F020     NOP
0102  C01D     MOVFF 0x1D, 0x21
0104  F021     NOP
0106  EC9F     CALL 0xB3E, 0
0108  F005     NOP
010A  0E06     MOVLW 0x6
010C  C01F     MOVFF 0x1F, PLUSW2
010E  FFDB     NOP
0110  0E07     MOVLW 0x7
0112  C020     MOVFF 0x20, PLUSW2
0114  FFDB     NOP
0116  0E08     MOVLW 0x8
0118  C021     MOVFF 0x21, PLUSW2
011A  FFDB     NOP
011C  0E09     MOVLW 0x9
011E  C022     MOVFF 0x22, PLUSW2
0120  FFDB     NOP
43:                if (rand2)
0122  0E01     MOVLW 0x1
0124  50DB     MOVF PLUSW2, W, ACCESS
0126  E025     BZ 0x172
44:                    delta *= -1;
0128  6A00     CLRF __tmp_0, ACCESS
012A  6A01     CLRF rand2, ACCESS
012C  0E80     MOVLW 0x80
012E  6E02     MOVWF angle, ACCESS
0130  0EBF     MOVLW 0xBF
0132  6E03     MOVWF 0x3, ACCESS
0134  50D9     MOVF FSR2, W, ACCESS
0136  0F06     ADDLW 0x6
0138  6EE9     MOVWF FSR0, ACCESS
013A  CFDA     MOVFF FSR2H, FSR0H
013C  FFEA     NOP
013E  CFEE     MOVFF POSTINC0, 0x1F
0140  F01F     NOP
0142  CFEE     MOVFF POSTINC0, 0x20
0144  F020     NOP
0146  CFEE     MOVFF POSTINC0, 0x21
0148  F021     NOP
014A  CFEF     MOVFF INDF0, 0x22
014C  F022     NOP
014E  C000     MOVFF __tmp_0, 0x24
0150  F024     NOP
0152  C001     MOVFF rand2, 0x25
0154  F025     NOP
0156  C002     MOVFF angle, 0x26
0158  F026     NOP
015A  C003     MOVFF 0x3, 0x27
015C  F027     NOP
015E  EC49     CALL 0xC92, 0
0160  F006     NOP
0162  C022     MOVFF 0x22, POSTDEC0
0164  FFED     NOP
0166  C021     MOVFF 0x21, POSTDEC0
0168  FFED     NOP
016A  C020     MOVFF 0x20, POSTDEC0
016C  FFED     NOP
016E  C01F     MOVFF 0x1F, INDF0
0170  FFEF     NOP
45:                angle = angle + delta;
0172  0E02     MOVLW 0x2
0174  CFDB     MOVFF PLUSW2, __tmp_0
0176  F000     NOP
0178  0E03     MOVLW 0x3
017A  CFDB     MOVFF PLUSW2, rand2
017C  F001     NOP
017E  0E04     MOVLW 0x4
0180  CFDB     MOVFF PLUSW2, angle
0182  F002     NOP
0184  0E05     MOVLW 0x5
0186  CFDB     MOVFF PLUSW2, 0x3
0188  F003     NOP
018A  0E06     MOVLW 0x6
018C  CFDB     MOVFF PLUSW2, 0x4
018E  F004     NOP
0190  0E07     MOVLW 0x7
0192  CFDB     MOVFF PLUSW2, 0x5
0194  F005     NOP
0196  0E08     MOVLW 0x8
0198  CFDB     MOVFF PLUSW2, delta
019A  F006     NOP
019C  0E09     MOVLW 0x9
019E  CFDB     MOVFF PLUSW2, 0x7
01A0  F007     NOP
01A2  C004     MOVFF 0x4, 0x24
01A4  F024     NOP
01A6  C005     MOVFF 0x5, 0x25
01A8  F025     NOP
01AA  C006     MOVFF delta, 0x26
01AC  F026     NOP
01AE  C007     MOVFF 0x7, 0x27
01B0  F027     NOP
01B2  C000     MOVFF __tmp_0, 0x1F
01B4  F01F     NOP
01B6  C001     MOVFF rand2, 0x20
01B8  F020     NOP
01BA  C002     MOVFF angle, 0x21
01BC  F021     NOP
01BE  C003     MOVFF 0x3, 0x22
01C0  F022     NOP
01C2  ECB3     CALL 0xB66, 0
01C4  F005     NOP
01C6  0E02     MOVLW 0x2
01C8  C01F     MOVFF 0x1F, PLUSW2
01CA  FFDB     NOP
01CC  0E03     MOVLW 0x3
01CE  C020     MOVFF 0x20, PLUSW2
01D0  FFDB     NOP
01D2  0E04     MOVLW 0x4
01D4  C021     MOVFF 0x21, PLUSW2
01D6  FFDB     NOP
01D8  0E05     MOVLW 0x5
01DA  C022     MOVFF 0x22, PLUSW2
01DC  FFDB     NOP
46:                ball.x_pos = 64;
01DE  010F     MOVLB 0xF
01E0  6B00     CLRF __tmp_0, BANKED
01E2  6B01     CLRF rand2, BANKED
01E4  0E80     MOVLW 0x80
01E6  6F02     MOVWF angle, BANKED
01E8  0E42     MOVLW 0x42
01EA  6F03     MOVWF 0x3, BANKED
47:                ball.y_pos = 32;
01EC  6B04     CLRF 0x4, BANKED
01EE  6B05     CLRF 0x5, BANKED
01F0  6B06     CLRF delta, BANKED
01F2  6F07     MOVWF 0x7, BANKED
48:                ball.theta = angle;
01F4  0E02     MOVLW 0x2
01F6  CFDB     MOVFF PLUSW2, 0xF08
01F8  FF08     NOP
01FA  0E03     MOVLW 0x3
01FC  CFDB     MOVFF PLUSW2, 0xF09
01FE  FF09     NOP
0200  0E04     MOVLW 0x4
0202  CFDB     MOVFF PLUSW2, 0xF0A
0204  FF0A     NOP
0206  0E05     MOVLW 0x5
0208  CFDB     MOVFF PLUSW2, 0xF0B
020A  FF0B     NOP
49:                ball.done_waiting = 0;    // this means that the ball is not done waiting
020C  6B0C     CLRF 0xC, BANKED
50:                
51:                // now reset the position of the paddles
52:                paddle1min = paddle_min;
020E  010F     MOVLB 0xF
0210  0E18     MOVLW 0x18
0212  6F0F     MOVWF Ret, BANKED
53:                paddle1max = paddle_max;
0214  0E27     MOVLW 0x27
0216  6F10     MOVWF 0x10, BANKED
54:                paddle2min = paddle_min;
0218  0E18     MOVLW 0x18
021A  6F11     MOVWF 0x11, BANKED
55:                paddle2max = paddle_max;
021C  0E27     MOVLW 0x27
021E  6F12     MOVWF 0x12, BANKED
56:                
57:                print_paddle(1);
0220  0E01     MOVLW 0x1
0222  6EE6     MOVWF POSTINC1, ACCESS
0224  DA56     RCALL print_paddle
0226  52E5     MOVF POSTDEC1, F, ACCESS
58:                print_paddle(2);
0228  0E02     MOVLW 0x2
022A  6EE6     MOVWF POSTINC1, ACCESS
022C  DA52     RCALL print_paddle
022E  52E5     MOVF POSTDEC1, F, ACCESS
59:                
60:            }
0230  0E0A     MOVLW 0xA
0232  5CE1     SUBWF FSR1, W, ACCESS
0234  E202     BC 0x23A
0236  6AE1     CLRF FSR1, ACCESS
0238  52E5     MOVF POSTDEC1, F, ACCESS
023A  6EE1     MOVWF FSR1, ACCESS
023C  52E5     MOVF POSTDEC1, F, ACCESS
023E  CFE7     MOVFF INDF1, FSR2
0240  FFD9     NOP
0242  0012     RETURN 0
61:            
62:            void update_ball(void){
0244  CFD9     MOVFF FSR2, POSTINC1
0246  FFE6     NOP
0248  CFE1     MOVFF FSR1, FSR2
024A  FFD9     NOP
024C  0E02     MOVLW 0x2
024E  26E1     ADDWF FSR1, F, ACCESS
63:                // first clear the old pixel
64:                if (ball.done_waiting){
0250  010F     MOVLB 0xF
0252  510C     MOVF 0xC, W, BANKED
0254  E101     BNZ 0x258
0256  D19B     BRA 0x58E
65:                    unsigned char cur_x, cur_y;
66:            
67:                    cur_x = (unsigned char) ball.x_pos;
0258  CF00     MOVFF ball, 0x1F
025A  F01F     NOP
025C  CF01     MOVFF 0xF01, 0x20
025E  F020     NOP
0260  CF02     MOVFF 0xF02, 0x21
0262  F021     NOP
0264  CF03     MOVFF 0xF03, 0x22
0266  F022     NOP
0268  ECDC     CALL 0xDB8, 0
026A  F006     NOP
026C  5021     MOVF 0x21, W, ACCESS
026E  6EDF     MOVWF INDF2, ACCESS
68:                    cur_y = (unsigned char) ball.y_pos;
0270  CF04     MOVFF 0xF04, 0x1F
0272  F01F     NOP
0274  CF05     MOVFF 0xF05, 0x20
0276  F020     NOP
0278  CF06     MOVFF 0xF06, 0x21
027A  F021     NOP
027C  CF07     MOVFF 0xF07, 0x22
027E  F022     NOP
0280  ECDC     CALL 0xDB8, 0
0282  F006     NOP
0284  0E01     MOVLW 0x1
0286  C021     MOVFF 0x21, PLUSW2
0288  FFDB     NOP
69:                    
70:                    SetCursor(cur_x, cur_y / 8);
028A  50DB     MOVF PLUSW2, W, ACCESS
028C  0BF8     ANDLW 0xF8
028E  42E8     RRNCF WREG, F, ACCESS
0290  42E8     RRNCF WREG, F, ACCESS
0292  42E8     RRNCF WREG, F, ACCESS
0294  6EE6     MOVWF POSTINC1, ACCESS
0296  CFDF     MOVFF INDF2, POSTINC1
0298  FFE6     NOP
029A  EC23     CALL 0x1846, 0
029C  F00C     NOP
029E  52E5     MOVF POSTDEC1, F, ACCESS
02A0  52E5     MOVF POSTDEC1, F, ACCESS
71:                    WriteData(0);
02A2  6AE6     CLRF POSTINC1, ACCESS
02A4  ECB7     CALL 0x176E, 0
02A6  F00B     NOP
02A8  52E5     MOVF POSTDEC1, F, ACCESS
72:            
73:                    
74:                    if (!cur_x) { // this is a goal for player 2
02AA  50DF     MOVF INDF2, W, ACCESS
02AC  E103     BNZ 0x2B4
75:                        goal_scored(1);
02AE  0E01     MOVLW 0x1
02B0  6EE6     MOVWF POSTINC1, ACCESS
76:                    } 
77:                    else if (cur_x == max_x){
02B2  D004     BRA 0x2BC
02B4  0E7F     MOVLW 0x7F
02B6  5CDF     SUBWF INDF2, W, ACCESS
02B8  E103     BNZ 0x2C0
78:                        goal_scored(0); // goal scored for player 1
02BA  6AE6     CLRF POSTINC1, ACCESS
02BC  D972     RCALL goal_scored
79:                    }
80:            
81:                    else if (!cur_y || cur_y == max_y) { // This is on the "bottom" the the screen
02BE  D05E     BRA 0x37C
02C0  0E01     MOVLW 0x1
02C2  50DB     MOVF PLUSW2, W, ACCESS
02C4  E004     BZ 0x2CE
02C6  0E01     MOVLW 0x1
02C8  50DB     MOVF PLUSW2, W, ACCESS
02CA  083F     SUBLW 0x3F
02CC  E119     BNZ 0x300
82:                        ball.theta *= -1;
02CE  6A24     CLRF 0x24, ACCESS
02D0  6A25     CLRF 0x25, ACCESS
02D2  0E80     MOVLW 0x80
02D4  6E26     MOVWF 0x26, ACCESS
02D6  0EBF     MOVLW 0xBF
02D8  6E27     MOVWF 0x27, ACCESS
02DA  CF08     MOVFF 0xF08, 0x1F
02DC  F01F     NOP
02DE  CF09     MOVFF 0xF09, 0x20
02E0  F020     NOP
02E2  CF0A     MOVFF 0xF0A, 0x21
02E4  F021     NOP
02E6  CF0B     MOVFF 0xF0B, 0x22
02E8  F022     NOP
02EA  EC49     CALL 0xC92, 0
02EC  F006     NOP
02EE  C01F     MOVFF 0x1F, 0xF08
02F0  FF08     NOP
02F2  C020     MOVFF 0x20, 0xF09
02F4  FF09     NOP
02F6  C021     MOVFF 0x21, 0xF0A
02F8  FF0A     NOP
02FA  C022     MOVFF 0x22, 0xF0B
02FC  FF0B     NOP
83:                    }
84:                    else if ( cur_x == 1 && cur_y >= paddle1min && cur_y <= paddle1max){ // this hit player 1's paddle
02FE  D03F     BRA 0x37E
0300  04DF     DECF INDF2, W, ACCESS
0302  E11C     BNZ 0x33C
0304  010F     MOVLB 0xF
0306  510F     MOVF Ret, W, BANKED
0308  6EF3     MOVWF PROD, ACCESS
030A  0E01     MOVLW 0x1
030C  CFDB     MOVFF PLUSW2, PRODH
030E  FFF4     NOP
0310  50F3     MOVF PROD, W, ACCESS
0312  5CF4     SUBWF PRODH, W, ACCESS
0314  E313     BNC 0x33C
0316  0E01     MOVLW 0x1
0318  CFDB     MOVFF PLUSW2, __tmp_0
031A  F000     NOP
031C  5110     MOVF 0x10, W, BANKED
031E  80D8     BSF STATUS, 0, ACCESS
0320  5400     SUBFWB __tmp_0, W, ACCESS
0322  E30C     BNC 0x33C
85:                        paddle_reflect(1,cur_y - paddle1min);
0324  0E01     MOVLW 0x1
0326  50DB     MOVF PLUSW2, W, ACCESS
0328  80D8     BSF STATUS, 0, ACCESS
032A  550F     SUBFWB Ret, W, BANKED
032C  6EE6     MOVWF POSTINC1, ACCESS
032E  0E01     MOVLW 0x1
0330  6EE6     MOVWF POSTINC1, ACCESS
0332  DAF9     RCALL paddle_reflect
0334  52E5     MOVF POSTDEC1, F, ACCESS
0336  52E5     MOVF POSTDEC1, F, ACCESS
86:                        print_paddle(1);
0338  0E01     MOVLW 0x1
87:                    }
88:                    else if (cur_x == 126 && cur_y >= paddle2min && cur_y <= paddle2max){  // this hit player 2's paddle
033A  D01E     BRA 0x378
033C  0E7E     MOVLW 0x7E
033E  5CDF     SUBWF INDF2, W, ACCESS
0340  E11E     BNZ 0x37E
0342  010F     MOVLB 0xF
0344  5111     MOVF 0x11, W, BANKED
0346  6EF3     MOVWF PROD, ACCESS
0348  0E01     MOVLW 0x1
034A  CFDB     MOVFF PLUSW2, PRODH
034C  FFF4     NOP
034E  50F3     MOVF PROD, W, ACCESS
0350  5CF4     SUBWF PRODH, W, ACCESS
0352  E315     BNC 0x37E
0354  0E01     MOVLW 0x1
0356  CFDB     MOVFF PLUSW2, __tmp_0
0358  F000     NOP
035A  5112     MOVF 0x12, W, BANKED
035C  80D8     BSF STATUS, 0, ACCESS
035E  5400     SUBFWB __tmp_0, W, ACCESS
0360  E30E     BNC 0x37E
89:                        paddle_reflect(2,cur_y - paddle2min);
0362  0E01     MOVLW 0x1
0364  50DB     MOVF PLUSW2, W, ACCESS
0366  80D8     BSF STATUS, 0, ACCESS
0368  5511     SUBFWB 0x11, W, BANKED
036A  6EE6     MOVWF POSTINC1, ACCESS
036C  0E02     MOVLW 0x2
036E  6EE6     MOVWF POSTINC1, ACCESS
0370  DADA     RCALL paddle_reflect
0372  52E5     MOVF POSTDEC1, F, ACCESS
0374  52E5     MOVF POSTDEC1, F, ACCESS
90:                        print_paddle(2);
0376  0E02     MOVLW 0x2
0378  6EE6     MOVWF POSTINC1, ACCESS
037A  D9AB     RCALL print_paddle
037C  52E5     MOVF POSTDEC1, F, ACCESS
91:                    }
92:                    // now update the position of the ball
93:                    ball.x_pos += scale * cos(ball.theta * deg_to_rad);
037E  0E4D     MOVLW 0x4D
0380  6E24     MOVWF 0x24, ACCESS
0382  0EF3     MOVLW 0xF3
0384  6E25     MOVWF 0x25, ACCESS
0386  0E8E     MOVLW 0x8E
0388  6E26     MOVWF 0x26, ACCESS
038A  0E3C     MOVLW 0x3C
038C  6E27     MOVWF 0x27, ACCESS
038E  CF08     MOVFF 0xF08, 0x1F
0390  F01F     NOP
0392  CF09     MOVFF 0xF09, 0x20
0394  F020     NOP
0396  CF0A     MOVFF 0xF0A, 0x21
0398  F021     NOP
039A  CF0B     MOVFF 0xF0B, 0x22
039C  F022     NOP
039E  EC49     CALL 0xC92, 0
03A0  F006     NOP
03A2  C01F     MOVFF 0x1F, 0x4
03A4  F004     NOP
03A6  C020     MOVFF 0x20, 0x5
03A8  F005     NOP
03AA  C021     MOVFF 0x21, delta
03AC  F006     NOP
03AE  C022     MOVFF 0x22, 0x7
03B0  F007     NOP
03B2  C01F     MOVFF 0x1F, POSTINC1
03B4  FFE6     NOP
03B6  C020     MOVFF 0x20, POSTINC1
03B8  FFE6     NOP
03BA  C021     MOVFF 0x21, POSTINC1
03BC  FFE6     NOP
03BE  C022     MOVFF 0x22, POSTINC1
03C0  FFE6     NOP
03C2  EC69     CALL 0x1CD2, 0
03C4  F00E     NOP
03C6  52E5     MOVF POSTDEC1, F, ACCESS
03C8  52E5     MOVF POSTDEC1, F, ACCESS
03CA  52E5     MOVF POSTDEC1, F, ACCESS
03CC  52E5     MOVF POSTDEC1, F, ACCESS
03CE  C01E     MOVFF RR, __tmp_0
03D0  F000     NOP
03D2  C01F     MOVFF 0x1F, rand2
03D4  F001     NOP
03D6  C020     MOVFF 0x20, angle
03D8  F002     NOP
03DA  C021     MOVFF 0x21, 0x3
03DC  F003     NOP
03DE  C01E     MOVFF RR, 0x24
03E0  F024     NOP
03E2  C01F     MOVFF 0x1F, 0x25
03E4  F025     NOP
03E6  C020     MOVFF 0x20, 0x26
03E8  F026     NOP
03EA  C021     MOVFF 0x21, 0x27
03EC  F027     NOP
03EE  CF00     MOVFF ball, 0x1F
03F0  F01F     NOP
03F2  CF01     MOVFF 0xF01, 0x20
03F4  F020     NOP
03F6  CF02     MOVFF 0xF02, 0x21
03F8  F021     NOP
03FA  CF03     MOVFF 0xF03, 0x22
03FC  F022     NOP
03FE  ECB3     CALL 0xB66, 0
0400  F005     NOP
0402  C01F     MOVFF 0x1F, ball
0404  FF00     NOP
0406  C020     MOVFF 0x20, 0xF01
0408  FF01     NOP
040A  C021     MOVFF 0x21, 0xF02
040C  FF02     NOP
040E  C022     MOVFF 0x22, 0xF03
0410  FF03     NOP
94:                    ball.y_pos += scale * sin(ball.theta * deg_to_rad);
0412  0E4D     MOVLW 0x4D
0414  6E24     MOVWF 0x24, ACCESS
0416  0EF3     MOVLW 0xF3
0418  6E25     MOVWF 0x25, ACCESS
041A  0E8E     MOVLW 0x8E
041C  6E26     MOVWF 0x26, ACCESS
041E  0E3C     MOVLW 0x3C
0420  6E27     MOVWF 0x27, ACCESS
0422  CF08     MOVFF 0xF08, 0x1F
0424  F01F     NOP
0426  CF09     MOVFF 0xF09, 0x20
0428  F020     NOP
042A  CF0A     MOVFF 0xF0A, 0x21
042C  F021     NOP
042E  CF0B     MOVFF 0xF0B, 0x22
0430  F022     NOP
0432  EC49     CALL 0xC92, 0
0434  F006     NOP
0436  C01F     MOVFF 0x1F, 0x4
0438  F004     NOP
043A  C020     MOVFF 0x20, 0x5
043C  F005     NOP
043E  C021     MOVFF 0x21, delta
0440  F006     NOP
0442  C022     MOVFF 0x22, 0x7
0444  F007     NOP
0446  C01F     MOVFF 0x1F, POSTINC1
0448  FFE6     NOP
044A  C020     MOVFF 0x20, POSTINC1
044C  FFE6     NOP
044E  C021     MOVFF 0x21, POSTINC1
0450  FFE6     NOP
0452  C022     MOVFF 0x22, POSTINC1
0454  FFE6     NOP
0456  EC41     CALL 0x1C82, 0
0458  F00E     NOP
045A  52E5     MOVF POSTDEC1, F, ACCESS
045C  52E5     MOVF POSTDEC1, F, ACCESS
045E  52E5     MOVF POSTDEC1, F, ACCESS
0460  52E5     MOVF POSTDEC1, F, ACCESS
0462  C01E     MOVFF RR, __tmp_0
0464  F000     NOP
0466  C01F     MOVFF 0x1F, rand2
0468  F001     NOP
046A  C020     MOVFF 0x20, angle
046C  F002     NOP
046E  C021     MOVFF 0x21, 0x3
0470  F003     NOP
0472  C01E     MOVFF RR, 0x24
0474  F024     NOP
0476  C01F     MOVFF 0x1F, 0x25
0478  F025     NOP
047A  C020     MOVFF 0x20, 0x26
047C  F026     NOP
047E  C021     MOVFF 0x21, 0x27
0480  F027     NOP
0482  CF04     MOVFF 0xF04, 0x1F
0484  F01F     NOP
0486  CF05     MOVFF 0xF05, 0x20
0488  F020     NOP
048A  CF06     MOVFF 0xF06, 0x21
048C  F021     NOP
048E  CF07     MOVFF 0xF07, 0x22
0490  F022     NOP
0492  ECB3     CALL 0xB66, 0
0494  F005     NOP
0496  C01F     MOVFF 0x1F, 0xF04
0498  FF04     NOP
049A  C020     MOVFF 0x20, 0xF05
049C  FF05     NOP
049E  C021     MOVFF 0x21, 0xF06
04A0  FF06     NOP
04A2  C022     MOVFF 0x22, 0xF07
04A4  FF07     NOP
95:            
96:                    if (ball.x_pos > 127)
04A6  6A24     CLRF 0x24, ACCESS
04A8  6A25     CLRF 0x25, ACCESS
04AA  0EFE     MOVLW 0xFE
04AC  6E26     MOVWF 0x26, ACCESS
04AE  0E42     MOVLW 0x42
04B0  6E27     MOVWF 0x27, ACCESS
04B2  CF00     MOVFF ball, 0x1F
04B4  F01F     NOP
04B6  CF01     MOVFF 0xF01, 0x20
04B8  F020     NOP
04BA  CF02     MOVFF 0xF02, 0x21
04BC  F021     NOP
04BE  CF03     MOVFF 0xF03, 0x22
04C0  F022     NOP
04C2  EC03     CALL 0xE06, 0
04C4  F007     NOP
04C6  0A01     XORLW 0x1
04C8  E107     BNZ 0x4D8
97:                        ball.x_pos = 127;
04CA  010F     MOVLB 0xF
04CC  6B00     CLRF __tmp_0, BANKED
04CE  6B01     CLRF rand2, BANKED
04D0  0EFE     MOVLW 0xFE
04D2  6F02     MOVWF angle, BANKED
04D4  0E42     MOVLW 0x42
04D6  6F03     MOVWF 0x3, BANKED
98:                    if (ball.y_pos > 63)
04D8  6A24     CLRF 0x24, ACCESS
04DA  6A25     CLRF 0x25, ACCESS
04DC  0E7C     MOVLW 0x7C
04DE  6E26     MOVWF 0x26, ACCESS
04E0  0E42     MOVLW 0x42
04E2  6E27     MOVWF 0x27, ACCESS
04E4  CF04     MOVFF 0xF04, 0x1F
04E6  F01F     NOP
04E8  CF05     MOVFF 0xF05, 0x20
04EA  F020     NOP
04EC  CF06     MOVFF 0xF06, 0x21
04EE  F021     NOP
04F0  CF07     MOVFF 0xF07, 0x22
04F2  F022     NOP
04F4  EC03     CALL 0xE06, 0
04F6  F007     NOP
04F8  0A01     XORLW 0x1
04FA  E107     BNZ 0x50A
99:                        ball.y_pos = 63;
04FC  010F     MOVLB 0xF
04FE  6B04     CLRF 0x4, BANKED
0500  6B05     CLRF 0x5, BANKED
0502  0E7C     MOVLW 0x7C
0504  6F06     MOVWF delta, BANKED
0506  0E42     MOVLW 0x42
0508  6F07     MOVWF 0x7, BANKED
100:           
101:                   cur_x = (unsigned char) ball.x_pos;
050A  CF00     MOVFF ball, 0x1F
050C  F01F     NOP
050E  CF01     MOVFF 0xF01, 0x20
0510  F020     NOP
0512  CF02     MOVFF 0xF02, 0x21
0514  F021     NOP
0516  CF03     MOVFF 0xF03, 0x22
0518  F022     NOP
051A  ECDC     CALL 0xDB8, 0
051C  F006     NOP
051E  5021     MOVF 0x21, W, ACCESS
0520  6EDF     MOVWF INDF2, ACCESS
102:                   cur_y = (unsigned char) ball.y_pos;
0522  CF04     MOVFF 0xF04, 0x1F
0524  F01F     NOP
0526  CF05     MOVFF 0xF05, 0x20
0528  F020     NOP
052A  CF06     MOVFF 0xF06, 0x21
052C  F021     NOP
052E  CF07     MOVFF 0xF07, 0x22
0530  F022     NOP
0532  ECDC     CALL 0xDB8, 0
0534  F006     NOP
0536  0E01     MOVLW 0x1
0538  C021     MOVFF 0x21, PLUSW2
053A  FFDB     NOP
103:                   // now send to glcd
104:                   SetCursor(cur_x, cur_y / 8);
053C  50DB     MOVF PLUSW2, W, ACCESS
053E  0BF8     ANDLW 0xF8
0540  42E8     RRNCF WREG, F, ACCESS
0542  42E8     RRNCF WREG, F, ACCESS
0544  42E8     RRNCF WREG, F, ACCESS
0546  6EE6     MOVWF POSTINC1, ACCESS
0548  CFDF     MOVFF INDF2, POSTINC1
054A  FFE6     NOP
054C  EC23     CALL 0x1846, 0
054E  F00C     NOP
0550  52E5     MOVF POSTDEC1, F, ACCESS
0552  52E5     MOVF POSTDEC1, F, ACCESS
105:                   cur_x = 1 << (cur_y % 8);
0554  0E01     MOVLW 0x1
0556  50DB     MOVF PLUSW2, W, ACCESS
0558  0B07     ANDLW 0x7
055A  6E00     MOVWF __tmp_0, ACCESS
055C  0E01     MOVLW 0x1
055E  5200     MOVF __tmp_0, F, ACCESS
0560  E004     BZ 0x56A
0562  46E8     RLNCF WREG, F, ACCESS
0564  0BFE     ANDLW 0xFE
0566  0600     DECF __tmp_0, F, ACCESS
0568  E1FC     BNZ 0x562
056A  6EDF     MOVWF INDF2, ACCESS
106:                   WriteData(1 << (cur_y % 8));
056C  0E01     MOVLW 0x1
056E  50DB     MOVF PLUSW2, W, ACCESS
0570  0B07     ANDLW 0x7
0572  6E00     MOVWF __tmp_0, ACCESS
0574  0E01     MOVLW 0x1
0576  5200     MOVF __tmp_0, F, ACCESS
0578  E004     BZ 0x582
057A  46E8     RLNCF WREG, F, ACCESS
057C  0BFE     ANDLW 0xFE
057E  0600     DECF __tmp_0, F, ACCESS
0580  E1FC     BNZ 0x57A
0582  6EE6     MOVWF POSTINC1, ACCESS
0584  ECB7     CALL 0x176E, 0
0586  F00B     NOP
0588  52E5     MOVF POSTDEC1, F, ACCESS
107:                   ball.done_waiting = 0;   // the ball now needs to go through another waiting cycle
058A  010F     MOVLB 0xF
058C  6B0C     CLRF 0xC, BANKED
108:               }
109:           }
058E  0E02     MOVLW 0x2
0590  5CE1     SUBWF FSR1, W, ACCESS
0592  E202     BC 0x598
0594  6AE1     CLRF FSR1, ACCESS
0596  52E5     MOVF POSTDEC1, F, ACCESS
0598  6EE1     MOVWF FSR1, ACCESS
059A  52E5     MOVF POSTDEC1, F, ACCESS
059C  CFE7     MOVFF INDF1, FSR2
059E  FFD9     NOP
05A0  0012     RETURN 0
110:           
111:           void goal_scored(unsigned char player){
05A2  CFD9     MOVFF FSR2, POSTINC1
05A4  FFE6     NOP
05A6  CFE1     MOVFF FSR1, FSR2
05A8  FFD9     NOP
112:               if (!player)
05AA  0EFE     MOVLW 0xFE
05AC  50DB     MOVF PLUSW2, W, ACCESS
05AE  E103     BNZ 0x5B6
113:                   player1_points++;
05B0  010F     MOVLB 0xF
05B2  2B0D     INCF 0xD, F, BANKED
114:               else if (player)
05B4  D005     BRA 0x5C0
05B6  0EFE     MOVLW 0xFE
05B8  50DB     MOVF PLUSW2, W, ACCESS
05BA  E002     BZ 0x5C0
115:                   player2_points++;
05BC  010F     MOVLB 0xF
05BE  2B0E     INCF type, F, BANKED
116:               
117:               clear_paddle(1);
05C0  0E01     MOVLW 0x1
05C2  6EE6     MOVWF POSTINC1, ACCESS
05C4  DA1C     RCALL clear_paddle
05C6  52E5     MOVF POSTDEC1, F, ACCESS
118:               clear_paddle(2);
05C8  0E02     MOVLW 0x2
05CA  6EE6     MOVWF POSTINC1, ACCESS
05CC  DA18     RCALL clear_paddle
05CE  52E5     MOVF POSTDEC1, F, ACCESS
119:               // now reset the ball 
120:               Initial_ball();
05D0  DD39     RCALL Initial_ball
121:           }
05D2  52E5     MOVF POSTDEC1, F, ACCESS
05D4  CFE7     MOVFF INDF1, FSR2
05D6  FFD9     NOP
05D8  0012     RETURN 0
122:           
123:           void update_paddles(void) {
124:               // first check if the buttons for player 1 have been pressed 
125:               if (!paddle1) {
05DA  010F     MOVLB 0xF
05DC  5113     MOVF xIEEE, W, BANKED
05DE  E111     BNZ 0x602
126:                   if (PORTAbits.RA0 && !PORTAbits.RA1){ // this means that player 1 wants to move "up" 
05E0  5080     MOVF PORTA, W, ACCESS
05E2  0B01     ANDLW 0x1
05E4  E005     BZ 0x5F0
05E6  5080     MOVF PORTA, W, ACCESS
05E8  0B02     ANDLW 0x2
05EA  E102     BNZ 0x5F0
127:                       paddle1 = 1;
05EC  0E01     MOVLW 0x1
128:                       T3CONbits.TMR3ON = 1;
129:           
130:                   }
131:                   else if (PORTAbits.RA1 && !PORTAbits.RA0){ // this means that player 1 wants to move "down"
05EE  D007     BRA 0x5FE
05F0  5080     MOVF PORTA, W, ACCESS
05F2  0B02     ANDLW 0x2
05F4  E006     BZ 0x602
05F6  5080     MOVF PORTA, W, ACCESS
05F8  0B01     ANDLW 0x1
05FA  E103     BNZ 0x602
132:                       paddle1 = 2;
05FC  0E02     MOVLW 0x2
05FE  6F13     MOVWF xIEEE, BANKED
133:                       T3CONbits.TMR3ON = 1;
0600  80B1     BSF T3CON, 0, ACCESS
134:           
135:                   }
136:               }
137:               if (!paddle2){
0602  5114     MOVF 0x14, W, BANKED
0604  E113     BNZ 0x62C
138:                   if (PORTJbits.RJ0 && !PORTJbits.RJ1){
0606  5088     MOVF PORTJ, W, ACCESS
0608  0B01     ANDLW 0x1
060A  E007     BZ 0x61A
060C  5088     MOVF PORTJ, W, ACCESS
060E  0B02     ANDLW 0x2
0610  E104     BNZ 0x61A
139:                       paddle2 = 1;
0612  0E01     MOVLW 0x1
0614  6F14     MOVWF 0x14, BANKED
140:                       T5CONbits.TMR5ON = 1;
0616  807B     BSF T5CON, 0, ACCESS
141:                   }
142:                   else if (PORTJbits.RJ1 && !PORTJbits.RJ0){
0618  0012     RETURN 0
061A  5088     MOVF PORTJ, W, ACCESS
061C  0B02     ANDLW 0x2
061E  E006     BZ 0x62C
0620  5088     MOVF PORTJ, W, ACCESS
0622  0B01     ANDLW 0x1
0624  E103     BNZ 0x62C
143:                       paddle2 = 2;
0626  0E02     MOVLW 0x2
0628  6F14     MOVWF 0x14, BANKED
144:                       T5CONbits.TMR5ON = 1;
062A  807B     BSF T5CON, 0, ACCESS
145:                   }
146:               }
147:           }
062C  0012     RETURN 0
148:           
149:           
150:           void TMR1handler() {
151:               ball.done_waiting = 1;  // this means that the ball has completed its waiting cycle
062E  010F     MOVLB 0xF
0630  0E01     MOVLW 0x1
0632  6F0C     MOVWF 0xC, BANKED
152:               TMR1H = ball_high_byte;
0634  0E70     MOVLW 0x70
0636  6ECF     MOVWF TMR1H, ACCESS
153:               TMR1L = ball_low_byte; 
0638  6ACE     CLRF TMR1, ACCESS
154:               PIR1bits.TMR1IF = 0;      //Clear flag and return to polling routine
063A  909E     BCF PIR1, 0, ACCESS
155:           }
063C  0012     RETURN 0
156:           
157:           void TMR3handler(){
158:               // stop the timer
159:               T3CONbits.TMR3ON = 0;
063E  90B1     BCF T3CON, 0, ACCESS
160:               // move the paddle
161:               if (paddle1 == 1){
0640  010F     MOVLB 0xF
0642  0513     DECF xIEEE, W, BANKED
0644  E10B     BNZ 0x65C
162:                   if (paddle1max < max_y){
0646  0E3F     MOVLW 0x3F
0648  5D10     SUBWF 0x10, W, BANKED
064A  E215     BC 0x676
163:                       clear_paddle(1);
064C  0E01     MOVLW 0x1
064E  6EE6     MOVWF POSTINC1, ACCESS
0650  D9D6     RCALL clear_paddle
0652  52E5     MOVF POSTDEC1, F, ACCESS
164:                       paddle1min++;
0654  010F     MOVLB 0xF
0656  2B0F     INCF Ret, F, BANKED
165:                       paddle1max++;
0658  2B10     INCF 0x10, F, BANKED
166:                   }
167:               }
168:               else if(paddle1 == 2){
065A  D00D     BRA 0x676
065C  0E02     MOVLW 0x2
065E  5D13     SUBWF xIEEE, W, BANKED
0660  E10A     BNZ 0x676
169:                   if (paddle1min > 0){
0662  510F     MOVF Ret, W, BANKED
0664  0800     SUBLW 0x0
0666  E207     BC 0x676
170:                       clear_paddle(1);
0668  0E01     MOVLW 0x1
066A  6EE6     MOVWF POSTINC1, ACCESS
066C  D9C8     RCALL clear_paddle
066E  52E5     MOVF POSTDEC1, F, ACCESS
171:                       paddle1min--;
0670  010F     MOVLB 0xF
0672  070F     DECF Ret, F, BANKED
172:                       paddle1max--;
0674  0710     DECF 0x10, F, BANKED
173:                   }
174:               }
175:               // reload the register values
176:               TMR3H = paddle_tmr_high;
0676  6AB3     CLRF TMR3H, ACCESS
177:               TMR3L = paddle_tmr_low;
0678  6AB2     CLRF TMR3, ACCESS
178:               // clear paddle
179:               paddle1 = 0;
067A  6B13     CLRF xIEEE, BANKED
180:               print_paddle(1);
067C  0E01     MOVLW 0x1
067E  6EE6     MOVWF POSTINC1, ACCESS
0680  D828     RCALL print_paddle
0682  52E5     MOVF POSTDEC1, F, ACCESS
181:               // clear the interrupt flag
182:               PIR2bits.TMR3IF = 0;
0684  92A1     BCF PIR2, 1, ACCESS
183:           }
0686  0012     RETURN 0
184:           
185:           void TMR5handler(){
186:               // stop the timer
187:               T5CONbits.TMR5ON = 0;
0688  907B     BCF T5CON, 0, ACCESS
188:               // move the paddle
189:               if (paddle2 == 1){
068A  010F     MOVLB 0xF
068C  0514     DECF 0x14, W, BANKED
068E  E10B     BNZ 0x6A6
190:                   if (paddle2max < max_y){
0690  0E3F     MOVLW 0x3F
0692  5D12     SUBWF 0x12, W, BANKED
0694  E215     BC 0x6C0
191:                       clear_paddle(2);
0696  0E02     MOVLW 0x2
0698  6EE6     MOVWF POSTINC1, ACCESS
069A  D9B1     RCALL clear_paddle
069C  52E5     MOVF POSTDEC1, F, ACCESS
192:                       paddle2min++;
069E  010F     MOVLB 0xF
06A0  2B11     INCF 0x11, F, BANKED
193:                       paddle2max++;
06A2  2B12     INCF 0x12, F, BANKED
194:                   }
195:               }
196:               else if(paddle2 == 2){
06A4  D00D     BRA 0x6C0
06A6  0E02     MOVLW 0x2
06A8  5D14     SUBWF 0x14, W, BANKED
06AA  E10A     BNZ 0x6C0
197:                   if (paddle2min > 0){
06AC  5111     MOVF 0x11, W, BANKED
06AE  0800     SUBLW 0x0
06B0  E207     BC 0x6C0
198:                       clear_paddle(2);
06B2  0E02     MOVLW 0x2
06B4  6EE6     MOVWF POSTINC1, ACCESS
06B6  D9A3     RCALL clear_paddle
06B8  52E5     MOVF POSTDEC1, F, ACCESS
199:                       paddle2min--;
06BA  010F     MOVLB 0xF
06BC  0711     DECF 0x11, F, BANKED
200:                       paddle2max--;
06BE  0712     DECF 0x12, F, BANKED
201:                   }
202:               }
203:               // reload the register values
204:               TMR5H = paddle_tmr_high;
06C0  6A7D     CLRF TMR5H, ACCESS
205:               TMR5L = paddle_tmr_low;
06C2  6A7C     CLRF TMR5, ACCESS
206:               // clear paddle
207:               paddle2 = 0;
06C4  6B14     CLRF 0x14, BANKED
208:               print_paddle(2);
06C6  0E02     MOVLW 0x2
06C8  6EE6     MOVWF POSTINC1, ACCESS
06CA  D803     RCALL print_paddle
06CC  52E5     MOVF POSTDEC1, F, ACCESS
209:               // clear the interrupt flag
210:               PIR5bits.TMR5IF = 0;
06CE  92BA     BCF PIR5, 1, ACCESS
211:           }
06D0  0012     RETURN 0
212:           
213:           void print_paddle(unsigned char player){
06D2  CFD9     MOVFF FSR2, POSTINC1
06D4  FFE6     NOP
06D6  CFE1     MOVFF FSR1, FSR2
06D8  FFD9     NOP
06DA  0E02     MOVLW 0x2
06DC  26E1     ADDWF FSR1, F, ACCESS
214:               unsigned char input;
215:               unsigned char cursor;
216:               if (player == 1){ // this mean I need to reprint the paddle for player 1
06DE  0EFE     MOVLW 0xFE
06E0  04DB     DECF PLUSW2, W, ACCESS
06E2  E001     BZ 0x6E6
06E4  D082     BRA 0x7EA
217:                   
218:                   // I will print the lower page first
219:                   cursor = paddle1min / 8;
06E6  010F     MOVLB 0xF
06E8  510F     MOVF Ret, W, BANKED
06EA  0BF8     ANDLW 0xF8
06EC  42E8     RRNCF WREG, F, ACCESS
06EE  42E8     RRNCF WREG, F, ACCESS
06F0  42E8     RRNCF WREG, F, ACCESS
06F2  6EE7     MOVWF INDF1, ACCESS
06F4  0E01     MOVLW 0x1
06F6  CFE7     MOVFF INDF1, PLUSW2
06F8  FFDB     NOP
220:                   input = 0xFF << (paddle1min % 8);
06FA  510F     MOVF Ret, W, BANKED
06FC  0B07     ANDLW 0x7
06FE  6E00     MOVWF __tmp_0, ACCESS
0700  0EFF     MOVLW 0xFF
0702  5200     MOVF __tmp_0, F, ACCESS
0704  E004     BZ 0x70E
0706  46E8     RLNCF WREG, F, ACCESS
0708  0BFE     ANDLW 0xFE
070A  0600     DECF __tmp_0, F, ACCESS
070C  E1FC     BNZ 0x706
070E  6EDF     MOVWF INDF2, ACCESS
221:                   
222:                   SetCursor(0, cursor);
0710  0E01     MOVLW 0x1
0712  CFDB     MOVFF PLUSW2, POSTINC1
0714  FFE6     NOP
0716  6AE6     CLRF POSTINC1, ACCESS
0718  EC23     CALL 0x1846, 0
071A  F00C     NOP
071C  52E5     MOVF POSTDEC1, F, ACCESS
071E  52E5     MOVF POSTDEC1, F, ACCESS
223:                   WriteData(input);
0720  CFDF     MOVFF INDF2, POSTINC1
0722  FFE6     NOP
0724  ECB7     CALL 0x176E, 0
0726  F00B     NOP
0728  52E5     MOVF POSTDEC1, F, ACCESS
224:                   // and do a second line to make the paddle a little thicker
225:                   SetCursor(1,cursor);
072A  0E01     MOVLW 0x1
072C  CFDB     MOVFF PLUSW2, POSTINC1
072E  FFE6     NOP
0730  6EE6     MOVWF POSTINC1, ACCESS
0732  EC23     CALL 0x1846, 0
0734  F00C     NOP
0736  52E5     MOVF POSTDEC1, F, ACCESS
0738  52E5     MOVF POSTDEC1, F, ACCESS
226:                   WriteData(input);
073A  CFDF     MOVFF INDF2, POSTINC1
073C  FFE6     NOP
073E  ECB7     CALL 0x176E, 0
0740  F00B     NOP
0742  52E5     MOVF POSTDEC1, F, ACCESS
227:                   
228:                   // now print the upper page
229:                   cursor = paddle1max / 8;
0744  010F     MOVLB 0xF
0746  5110     MOVF 0x10, W, BANKED
0748  0BF8     ANDLW 0xF8
074A  42E8     RRNCF WREG, F, ACCESS
074C  42E8     RRNCF WREG, F, ACCESS
074E  42E8     RRNCF WREG, F, ACCESS
0750  6EE7     MOVWF INDF1, ACCESS
0752  0E01     MOVLW 0x1
0754  CFE7     MOVFF INDF1, PLUSW2
0756  FFDB     NOP
230:                   input = 0xFF >> (7 - (paddle1max % 8));
0758  6800     SETF __tmp_0, ACCESS
075A  0E07     MOVLW 0x7
075C  6E01     MOVWF rand2, ACCESS
075E  5110     MOVF 0x10, W, BANKED
0760  0B07     ANDLW 0x7
0762  5C01     SUBWF rand2, W, ACCESS
0764  C000     MOVFF __tmp_0, INDF1
0766  FFE7     NOP
0768  0B07     ANDLW 0x7
076A  E004     BZ 0x774
076C  42E7     RRNCF INDF1, F, ACCESS
076E  9EE7     BCF INDF1, 7, ACCESS
0770  06E8     DECF WREG, F, ACCESS
0772  E1FC     BNZ 0x76C
0774  50E7     MOVF INDF1, W, ACCESS
0776  6EDF     MOVWF INDF2, ACCESS
231:                   SetCursor(0, cursor);
0778  0E01     MOVLW 0x1
077A  CFDB     MOVFF PLUSW2, POSTINC1
077C  FFE6     NOP
077E  6AE6     CLRF POSTINC1, ACCESS
0780  EC23     CALL 0x1846, 0
0782  F00C     NOP
0784  52E5     MOVF POSTDEC1, F, ACCESS
0786  52E5     MOVF POSTDEC1, F, ACCESS
232:                   WriteData(input);
0788  CFDF     MOVFF INDF2, POSTINC1
078A  FFE6     NOP
078C  ECB7     CALL 0x176E, 0
078E  F00B     NOP
0790  52E5     MOVF POSTDEC1, F, ACCESS
233:                   SetCursor(1, cursor);
0792  0E01     MOVLW 0x1
0794  CFDB     MOVFF PLUSW2, POSTINC1
0796  FFE6     NOP
0798  6EE6     MOVWF POSTINC1, ACCESS
079A  EC23     CALL 0x1846, 0
079C  F00C     NOP
079E  52E5     MOVF POSTDEC1, F, ACCESS
07A0  52E5     MOVF POSTDEC1, F, ACCESS
234:                   WriteData(input);
07A2  CFDF     MOVFF INDF2, POSTINC1
07A4  FFE6     NOP
07A6  ECB7     CALL 0x176E, 0
07A8  F00B     NOP
07AA  52E5     MOVF POSTDEC1, F, ACCESS
235:                   
236:                   // now I will print the possible middle page
237:                   if ((cursor - (paddle1min / 8)) == 2){
07AC  0E01     MOVLW 0x1
07AE  CFDB     MOVFF PLUSW2, POSTINC1
07B0  FFE6     NOP
07B2  010F     MOVLB 0xF
07B4  510F     MOVF Ret, W, BANKED
07B6  0BF8     ANDLW 0xF8
07B8  42E8     RRNCF WREG, F, ACCESS
07BA  42E8     RRNCF WREG, F, ACCESS
07BC  42E8     RRNCF WREG, F, ACCESS
07BE  52E5     MOVF POSTDEC1, F, ACCESS
07C0  5CE7     SUBWF INDF1, W, ACCESS
07C2  0802     SUBLW 0x2
07C4  E001     BZ 0x7C8
07C6  D0A5     BRA 0x912
238:                       cursor--;
07C8  0E01     MOVLW 0x1
07CA  06DB     DECF PLUSW2, F, ACCESS
239:                       SetCursor(0,cursor);
07CC  CFDB     MOVFF PLUSW2, POSTINC1
07CE  FFE6     NOP
07D0  6AE6     CLRF POSTINC1, ACCESS
07D2  EC23     CALL 0x1846, 0
07D4  F00C     NOP
07D6  52E5     MOVF POSTDEC1, F, ACCESS
07D8  52E5     MOVF POSTDEC1, F, ACCESS
240:                       WriteData(0xFF);   // the middle page is guaranteed to be full
07DA  68E6     SETF POSTINC1, ACCESS
07DC  ECB7     CALL 0x176E, 0
07DE  F00B     NOP
07E0  52E5     MOVF POSTDEC1, F, ACCESS
241:                       SetCursor(1,cursor);
07E2  0E01     MOVLW 0x1
07E4  CFDB     MOVFF PLUSW2, POSTINC1
07E6  FFE6     NOP
242:                       WriteData(0xFF);
243:                   }
244:                   
245:               }
246:               else if(player == 2){   // this means I need to reprint the paddle for player 2
07E8  D08B     BRA 0x900
07EA  0EFE     MOVLW 0xFE
07EC  50DB     MOVF PLUSW2, W, ACCESS
07EE  0802     SUBLW 0x2
07F0  E001     BZ 0x7F4
07F2  D08F     BRA 0x912
247:                   cursor = paddle2min / 8;
07F4  010F     MOVLB 0xF
07F6  5111     MOVF 0x11, W, BANKED
07F8  0BF8     ANDLW 0xF8
07FA  42E8     RRNCF WREG, F, ACCESS
07FC  42E8     RRNCF WREG, F, ACCESS
07FE  42E8     RRNCF WREG, F, ACCESS
0800  6EE7     MOVWF INDF1, ACCESS
0802  0E01     MOVLW 0x1
0804  CFE7     MOVFF INDF1, PLUSW2
0806  FFDB     NOP
248:                   input = 0xFF << (paddle2min % 8);
0808  5111     MOVF 0x11, W, BANKED
080A  0B07     ANDLW 0x7
080C  6E00     MOVWF __tmp_0, ACCESS
080E  0EFF     MOVLW 0xFF
0810  5200     MOVF __tmp_0, F, ACCESS
0812  E004     BZ 0x81C
0814  46E8     RLNCF WREG, F, ACCESS
0816  0BFE     ANDLW 0xFE
0818  0600     DECF __tmp_0, F, ACCESS
081A  E1FC     BNZ 0x814
081C  6EDF     MOVWF INDF2, ACCESS
249:                   
250:                   SetCursor(127, cursor);
081E  0E01     MOVLW 0x1
0820  CFDB     MOVFF PLUSW2, POSTINC1
0822  FFE6     NOP
0824  0E7F     MOVLW 0x7F
0826  6EE6     MOVWF POSTINC1, ACCESS
0828  EC23     CALL 0x1846, 0
082A  F00C     NOP
082C  52E5     MOVF POSTDEC1, F, ACCESS
082E  52E5     MOVF POSTDEC1, F, ACCESS
251:                   WriteData(input);
0830  CFDF     MOVFF INDF2, POSTINC1
0832  FFE6     NOP
0834  ECB7     CALL 0x176E, 0
0836  F00B     NOP
0838  52E5     MOVF POSTDEC1, F, ACCESS
252:                   // and do a second line to make the paddle a little thicker
253:                   SetCursor(126,cursor);
083A  0E01     MOVLW 0x1
083C  CFDB     MOVFF PLUSW2, POSTINC1
083E  FFE6     NOP
0840  0E7E     MOVLW 0x7E
0842  6EE6     MOVWF POSTINC1, ACCESS
0844  EC23     CALL 0x1846, 0
0846  F00C     NOP
0848  52E5     MOVF POSTDEC1, F, ACCESS
084A  52E5     MOVF POSTDEC1, F, ACCESS
254:                   WriteData(input);
084C  CFDF     MOVFF INDF2, POSTINC1
084E  FFE6     NOP
0850  ECB7     CALL 0x176E, 0
0852  F00B     NOP
0854  52E5     MOVF POSTDEC1, F, ACCESS
255:                   
256:                   // now print the upper page
257:                   cursor = paddle2max / 8;
0856  010F     MOVLB 0xF
0858  5112     MOVF 0x12, W, BANKED
085A  0BF8     ANDLW 0xF8
085C  42E8     RRNCF WREG, F, ACCESS
085E  42E8     RRNCF WREG, F, ACCESS
0860  42E8     RRNCF WREG, F, ACCESS
0862  6EE7     MOVWF INDF1, ACCESS
0864  0E01     MOVLW 0x1
0866  CFE7     MOVFF INDF1, PLUSW2
0868  FFDB     NOP
258:                   input = 0xFF >> (7 - (paddle2max % 8));
086A  6800     SETF __tmp_0, ACCESS
086C  0E07     MOVLW 0x7
086E  6E01     MOVWF rand2, ACCESS
0870  5112     MOVF 0x12, W, BANKED
0872  0B07     ANDLW 0x7
0874  5C01     SUBWF rand2, W, ACCESS
0876  C000     MOVFF __tmp_0, INDF1
0878  FFE7     NOP
087A  0B07     ANDLW 0x7
087C  E004     BZ 0x886
087E  42E7     RRNCF INDF1, F, ACCESS
0880  9EE7     BCF INDF1, 7, ACCESS
0882  06E8     DECF WREG, F, ACCESS
0884  E1FC     BNZ 0x87E
0886  50E7     MOVF INDF1, W, ACCESS
0888  6EDF     MOVWF INDF2, ACCESS
259:                   SetCursor(127, cursor);
088A  0E01     MOVLW 0x1
088C  CFDB     MOVFF PLUSW2, POSTINC1
088E  FFE6     NOP
0890  0E7F     MOVLW 0x7F
0892  6EE6     MOVWF POSTINC1, ACCESS
0894  EC23     CALL 0x1846, 0
0896  F00C     NOP
0898  52E5     MOVF POSTDEC1, F, ACCESS
089A  52E5     MOVF POSTDEC1, F, ACCESS
260:                   WriteData(input);
089C  CFDF     MOVFF INDF2, POSTINC1
089E  FFE6     NOP
08A0  ECB7     CALL 0x176E, 0
08A2  F00B     NOP
08A4  52E5     MOVF POSTDEC1, F, ACCESS
261:                   SetCursor(126, cursor);
08A6  0E01     MOVLW 0x1
08A8  CFDB     MOVFF PLUSW2, POSTINC1
08AA  FFE6     NOP
08AC  0E7E     MOVLW 0x7E
08AE  6EE6     MOVWF POSTINC1, ACCESS
08B0  EC23     CALL 0x1846, 0
08B2  F00C     NOP
08B4  52E5     MOVF POSTDEC1, F, ACCESS
08B6  52E5     MOVF POSTDEC1, F, ACCESS
262:                   WriteData(input);
08B8  CFDF     MOVFF INDF2, POSTINC1
08BA  FFE6     NOP
08BC  ECB7     CALL 0x176E, 0
08BE  F00B     NOP
08C0  52E5     MOVF POSTDEC1, F, ACCESS
263:                   
264:                   // now I will print the possible middle page
265:                   if ((cursor - (paddle2min / 8)) == 2){
08C2  0E01     MOVLW 0x1
08C4  CFDB     MOVFF PLUSW2, POSTINC1
08C6  FFE6     NOP
08C8  010F     MOVLB 0xF
08CA  5111     MOVF 0x11, W, BANKED
08CC  0BF8     ANDLW 0xF8
08CE  42E8     RRNCF WREG, F, ACCESS
08D0  42E8     RRNCF WREG, F, ACCESS
08D2  42E8     RRNCF WREG, F, ACCESS
08D4  52E5     MOVF POSTDEC1, F, ACCESS
08D6  5CE7     SUBWF INDF1, W, ACCESS
08D8  0802     SUBLW 0x2
08DA  E11B     BNZ 0x912
266:                       cursor--;
08DC  0E01     MOVLW 0x1
08DE  06DB     DECF PLUSW2, F, ACCESS
267:                       SetCursor(127,cursor);
08E0  CFDB     MOVFF PLUSW2, POSTINC1
08E2  FFE6     NOP
08E4  0E7F     MOVLW 0x7F
08E6  6EE6     MOVWF POSTINC1, ACCESS
08E8  EC23     CALL 0x1846, 0
08EA  F00C     NOP
08EC  52E5     MOVF POSTDEC1, F, ACCESS
08EE  52E5     MOVF POSTDEC1, F, ACCESS
268:                       WriteData(0xFF);   // the middle page is guaranteed to be full
08F0  68E6     SETF POSTINC1, ACCESS
08F2  ECB7     CALL 0x176E, 0
08F4  F00B     NOP
08F6  52E5     MOVF POSTDEC1, F, ACCESS
269:                       SetCursor(126,cursor);
08F8  0E01     MOVLW 0x1
08FA  CFDB     MOVFF PLUSW2, POSTINC1
08FC  FFE6     NOP
08FE  0E7E     MOVLW 0x7E
0900  6EE6     MOVWF POSTINC1, ACCESS
0902  EC23     CALL 0x1846, 0
0904  F00C     NOP
0906  52E5     MOVF POSTDEC1, F, ACCESS
0908  52E5     MOVF POSTDEC1, F, ACCESS
270:                       WriteData(0xFF);
090A  68E6     SETF POSTINC1, ACCESS
090C  ECB7     CALL 0x176E, 0
090E  F00B     NOP
0910  52E5     MOVF POSTDEC1, F, ACCESS
271:                   }
272:               }
273:           }
0912  0E02     MOVLW 0x2
0914  5CE1     SUBWF FSR1, W, ACCESS
0916  E202     BC 0x91C
0918  6AE1     CLRF FSR1, ACCESS
091A  52E5     MOVF POSTDEC1, F, ACCESS
091C  6EE1     MOVWF FSR1, ACCESS
091E  52E5     MOVF POSTDEC1, F, ACCESS
0920  CFE7     MOVFF INDF1, FSR2
0922  FFD9     NOP
0924  0012     RETURN 0
274:           
275:           void paddle_reflect(unsigned char player, unsigned char pos){
0926  CFD9     MOVFF FSR2, POSTINC1
0928  FFE6     NOP
092A  CFE1     MOVFF FSR1, FSR2
092C  FFD9     NOP
092E  52E6     MOVF POSTINC1, F, ACCESS
276:               char answer;
277:               // first figure out the new angle
278:               if ( pos < 8 ){
0930  0E08     MOVLW 0x8
0932  6EF3     MOVWF PROD, ACCESS
0934  0EFD     MOVLW 0xFD
0936  CFDB     MOVFF PLUSW2, PRODH
0938  FFF4     NOP
093A  50F3     MOVF PROD, W, ACCESS
093C  5CF4     SUBWF PRODH, W, ACCESS
093E  E209     BC 0x952
279:                   answer = -10*(7-pos);
0940  0EFD     MOVLW 0xFD
0942  CFDB     MOVFF PLUSW2, POSTINC1
0944  FFE6     NOP
0946  0E07     MOVLW 0x7
0948  52E5     MOVF POSTDEC1, F, ACCESS
094A  80D8     BSF STATUS, 0, ACCESS
094C  54E7     SUBFWB INDF1, W, ACCESS
094E  0DF6     MULLW 0xF6
280:                   ball.theta = (float) answer;
281:               }
282:               else if (pos > 7){
0950  D008     BRA 0x962
0952  0EFD     MOVLW 0xFD
0954  50DB     MOVF PLUSW2, W, ACCESS
0956  0807     SUBLW 0x7
0958  E214     BC 0x982
283:                   answer = 10*(pos - 8);
095A  0EFD     MOVLW 0xFD
095C  50DB     MOVF PLUSW2, W, ACCESS
095E  0FF8     ADDLW 0xF8
0960  0D0A     MULLW 0xA
0962  50F3     MOVF PROD, W, ACCESS
0964  6EDF     MOVWF INDF2, ACCESS
284:                   ball.theta = (float) answer;
0966  CFDF     MOVFF INDF2, __tmp_0
0968  F000     NOP
096A  C000     MOVFF __tmp_0, 0x21
096C  F021     NOP
096E  EC8E     CALL 0xB1C, 0
0970  F005     NOP
0972  C01F     MOVFF 0x1F, 0xF08
0974  FF08     NOP
0976  C020     MOVFF 0x20, 0xF09
0978  FF09     NOP
097A  C021     MOVFF 0x21, 0xF0A
097C  FF0A     NOP
097E  C022     MOVFF 0x22, 0xF0B
0980  FF0B     NOP
285:               }
286:               
287:               if (player == 2){
0982  0EFE     MOVLW 0xFE
0984  50DB     MOVF PLUSW2, W, ACCESS
0986  0802     SUBLW 0x2
0988  E135     BNZ 0x9F4
288:                   if (ball.theta < 0)
098A  6A24     CLRF 0x24, ACCESS
098C  6A25     CLRF 0x25, ACCESS
098E  6A26     CLRF 0x26, ACCESS
0990  6A27     CLRF 0x27, ACCESS
0992  CF08     MOVFF 0xF08, 0x1F
0994  F01F     NOP
0996  CF09     MOVFF 0xF09, 0x20
0998  F020     NOP
099A  CF0A     MOVFF 0xF0A, 0x21
099C  F021     NOP
099E  CF0B     MOVFF 0xF0B, 0x22
09A0  F022     NOP
09A2  EC0C     CALL 0xE18, 0
09A4  F007     NOP
09A6  0A01     XORLW 0x1
09A8  E106     BNZ 0x9B6
289:                       ball.theta = -180 - ball.theta;
09AA  6A00     CLRF __tmp_0, ACCESS
09AC  6A01     CLRF rand2, ACCESS
09AE  0E34     MOVLW 0x34
09B0  6E02     MOVWF angle, ACCESS
09B2  0EC3     MOVLW 0xC3
290:                   else 
09B4  D005     BRA 0x9C0
291:                       ball.theta = 180 - ball.theta;
09B6  6A00     CLRF __tmp_0, ACCESS
09B8  6A01     CLRF rand2, ACCESS
09BA  0E34     MOVLW 0x34
09BC  6E02     MOVWF angle, ACCESS
09BE  0E43     MOVLW 0x43
09C0  6E03     MOVWF 0x3, ACCESS
09C2  CF08     MOVFF 0xF08, 0x24
09C4  F024     NOP
09C6  CF09     MOVFF 0xF09, 0x25
09C8  F025     NOP
09CA  CF0A     MOVFF 0xF0A, 0x26
09CC  F026     NOP
09CE  CF0B     MOVFF 0xF0B, 0x27
09D0  F027     NOP
09D2  C000     MOVFF __tmp_0, 0x1F
09D4  F01F     NOP
09D6  C001     MOVFF rand2, 0x20
09D8  F020     NOP
09DA  C002     MOVFF angle, 0x21
09DC  F021     NOP
09DE  6E22     MOVWF 0x22, ACCESS
09E0  ECB2     CALL 0xB64, 0
09E2  F005     NOP
09E4  C01F     MOVFF 0x1F, 0xF08
09E6  FF08     NOP
09E8  C020     MOVFF 0x20, 0xF09
09EA  FF09     NOP
09EC  C021     MOVFF 0x21, 0xF0A
09EE  FF0A     NOP
09F0  C022     MOVFF 0x22, 0xF0B
09F2  FF0B     NOP
292:               }
293:           }
09F4  52E5     MOVF POSTDEC1, F, ACCESS
09F6  52E5     MOVF POSTDEC1, F, ACCESS
09F8  CFE7     MOVFF INDF1, FSR2
09FA  FFD9     NOP
09FC  0012     RETURN 0
294:           
295:           void clear_paddle(unsigned char player){
09FE  CFD9     MOVFF FSR2, POSTINC1
0A00  FFE6     NOP
0A02  CFE1     MOVFF FSR1, FSR2
0A04  FFD9     NOP
296:               if (player == 1){
0A06  0EFE     MOVLW 0xFE
0A08  04DB     DECF PLUSW2, W, ACCESS
0A0A  E13A     BNZ 0xA80
297:                   SetCursor(0, paddle1min / 8);
0A0C  010F     MOVLB 0xF
0A0E  510F     MOVF Ret, W, BANKED
0A10  0BF8     ANDLW 0xF8
0A12  42E8     RRNCF WREG, F, ACCESS
0A14  42E8     RRNCF WREG, F, ACCESS
0A16  42E8     RRNCF WREG, F, ACCESS
0A18  6EE6     MOVWF POSTINC1, ACCESS
0A1A  6AE6     CLRF POSTINC1, ACCESS
0A1C  EC23     CALL 0x1846, 0
0A1E  F00C     NOP
0A20  52E5     MOVF POSTDEC1, F, ACCESS
0A22  52E5     MOVF POSTDEC1, F, ACCESS
298:                   WriteData(0);
0A24  6AE6     CLRF POSTINC1, ACCESS
0A26  ECB7     CALL 0x176E, 0
0A28  F00B     NOP
0A2A  52E5     MOVF POSTDEC1, F, ACCESS
299:                   SetCursor(0, paddle1max / 8);
0A2C  010F     MOVLB 0xF
0A2E  5110     MOVF 0x10, W, BANKED
0A30  0BF8     ANDLW 0xF8
0A32  42E8     RRNCF WREG, F, ACCESS
0A34  42E8     RRNCF WREG, F, ACCESS
0A36  42E8     RRNCF WREG, F, ACCESS
0A38  6EE6     MOVWF POSTINC1, ACCESS
0A3A  6AE6     CLRF POSTINC1, ACCESS
0A3C  EC23     CALL 0x1846, 0
0A3E  F00C     NOP
0A40  52E5     MOVF POSTDEC1, F, ACCESS
0A42  52E5     MOVF POSTDEC1, F, ACCESS
300:                   WriteData(0);
0A44  6AE6     CLRF POSTINC1, ACCESS
0A46  ECB7     CALL 0x176E, 0
0A48  F00B     NOP
0A4A  52E5     MOVF POSTDEC1, F, ACCESS
301:                   SetCursor(1, paddle1min / 8);
0A4C  010F     MOVLB 0xF
0A4E  510F     MOVF Ret, W, BANKED
0A50  0BF8     ANDLW 0xF8
0A52  42E8     RRNCF WREG, F, ACCESS
0A54  42E8     RRNCF WREG, F, ACCESS
0A56  42E8     RRNCF WREG, F, ACCESS
0A58  6EE6     MOVWF POSTINC1, ACCESS
0A5A  0E01     MOVLW 0x1
0A5C  6EE6     MOVWF POSTINC1, ACCESS
0A5E  EC23     CALL 0x1846, 0
0A60  F00C     NOP
0A62  52E5     MOVF POSTDEC1, F, ACCESS
0A64  52E5     MOVF POSTDEC1, F, ACCESS
302:                   WriteData(0);
0A66  6AE6     CLRF POSTINC1, ACCESS
0A68  ECB7     CALL 0x176E, 0
0A6A  F00B     NOP
0A6C  52E5     MOVF POSTDEC1, F, ACCESS
303:                   SetCursor(1, paddle1max / 8);
0A6E  010F     MOVLB 0xF
0A70  5110     MOVF 0x10, W, BANKED
0A72  0BF8     ANDLW 0xF8
0A74  42E8     RRNCF WREG, F, ACCESS
0A76  42E8     RRNCF WREG, F, ACCESS
0A78  42E8     RRNCF WREG, F, ACCESS
0A7A  6EE6     MOVWF POSTINC1, ACCESS
0A7C  0E01     MOVLW 0x1
304:                   WriteData(0);
305:               }
306:               else if (player == 2){
0A7E  D03F     BRA 0xAFE
0A80  0EFE     MOVLW 0xFE
0A82  50DB     MOVF PLUSW2, W, ACCESS
0A84  0802     SUBLW 0x2
0A86  E144     BNZ 0xB10
307:                   SetCursor(max_x, paddle2min / 8);
0A88  010F     MOVLB 0xF
0A8A  5111     MOVF 0x11, W, BANKED
0A8C  0BF8     ANDLW 0xF8
0A8E  42E8     RRNCF WREG, F, ACCESS
0A90  42E8     RRNCF WREG, F, ACCESS
0A92  42E8     RRNCF WREG, F, ACCESS
0A94  6EE6     MOVWF POSTINC1, ACCESS
0A96  0E7F     MOVLW 0x7F
0A98  6EE6     MOVWF POSTINC1, ACCESS
0A9A  EC23     CALL 0x1846, 0
0A9C  F00C     NOP
0A9E  52E5     MOVF POSTDEC1, F, ACCESS
0AA0  52E5     MOVF POSTDEC1, F, ACCESS
308:                   WriteData(0);
0AA2  6AE6     CLRF POSTINC1, ACCESS
0AA4  ECB7     CALL 0x176E, 0
0AA6  F00B     NOP
0AA8  52E5     MOVF POSTDEC1, F, ACCESS
309:                   SetCursor(max_x, paddle2max / 8);
0AAA  010F     MOVLB 0xF
0AAC  5112     MOVF 0x12, W, BANKED
0AAE  0BF8     ANDLW 0xF8
0AB0  42E8     RRNCF WREG, F, ACCESS
0AB2  42E8     RRNCF WREG, F, ACCESS
0AB4  42E8     RRNCF WREG, F, ACCESS
0AB6  6EE6     MOVWF POSTINC1, ACCESS
0AB8  0E7F     MOVLW 0x7F
0ABA  6EE6     MOVWF POSTINC1, ACCESS
0ABC  EC23     CALL 0x1846, 0
0ABE  F00C     NOP
0AC0  52E5     MOVF POSTDEC1, F, ACCESS
0AC2  52E5     MOVF POSTDEC1, F, ACCESS
310:                   WriteData(0);
0AC4  6AE6     CLRF POSTINC1, ACCESS
0AC6  ECB7     CALL 0x176E, 0
0AC8  F00B     NOP
0ACA  52E5     MOVF POSTDEC1, F, ACCESS
311:                   SetCursor(max_x - 1, paddle2min / 8);
0ACC  010F     MOVLB 0xF
0ACE  5111     MOVF 0x11, W, BANKED
0AD0  0BF8     ANDLW 0xF8
0AD2  42E8     RRNCF WREG, F, ACCESS
0AD4  42E8     RRNCF WREG, F, ACCESS
0AD6  42E8     RRNCF WREG, F, ACCESS
0AD8  6EE6     MOVWF POSTINC1, ACCESS
0ADA  0E7E     MOVLW 0x7E
0ADC  6EE6     MOVWF POSTINC1, ACCESS
0ADE  EC23     CALL 0x1846, 0
0AE0  F00C     NOP
0AE2  52E5     MOVF POSTDEC1, F, ACCESS
0AE4  52E5     MOVF POSTDEC1, F, ACCESS
312:                   WriteData(0);
0AE6  6AE6     CLRF POSTINC1, ACCESS
0AE8  ECB7     CALL 0x176E, 0
0AEA  F00B     NOP
0AEC  52E5     MOVF POSTDEC1, F, ACCESS
313:                   SetCursor(max_x - 1, paddle2max / 8);
0AEE  010F     MOVLB 0xF
0AF0  5112     MOVF 0x12, W, BANKED
0AF2  0BF8     ANDLW 0xF8
0AF4  42E8     RRNCF WREG, F, ACCESS
0AF6  42E8     RRNCF WREG, F, ACCESS
0AF8  42E8     RRNCF WREG, F, ACCESS
0AFA  6EE6     MOVWF POSTINC1, ACCESS
0AFC  0E7E     MOVLW 0x7E
0AFE  6EE6     MOVWF POSTINC1, ACCESS
0B00  EC23     CALL 0x1846, 0
0B02  F00C     NOP
0B04  52E5     MOVF POSTDEC1, F, ACCESS
0B06  52E5     MOVF POSTDEC1, F, ACCESS
314:                   WriteData(0);
0B08  6AE6     CLRF POSTINC1, ACCESS
0B0A  ECB7     CALL 0x176E, 0
0B0C  F00B     NOP
0B0E  52E5     MOVF POSTDEC1, F, ACCESS
315:               }
316:           }
0B10  52E5     MOVF POSTDEC1, F, ACCESS
0B12  CFE7     MOVFF INDF1, FSR2
0B14  FFD9     NOP
0B16  0012     RETURN 0
---  C:/Users/nickm/Documents/CU-Boulder Senior Year/ASEN 4419/Final Project/PONG_project.X/GLCDroutinesEasyPic.c
1:             /******************************************************************************
2:              *
3:              * Author: Gabriel LoDolce
4:              * Author of last change: Josh White
5:              * Date of last change: 6/30/2017
6:              * Revision: 1.0
7:              *
8:              *******************************************************************************
9:              * 
10:             * FileName:        GLCDroutinesEasyPic.c
11:             * Dependencies:    Delays.h and p18cxxx.h
12:             * Processor:       PIC18F
13:             * Compiler:        C18
14:             *
15:             *******************************************************************************
16:             *
17:             * File Description: Implementation file for the GLCD routines library
18:             *
19:             ******************************************************************************/
20:            
21:            #include <delays.h>
22:            #include <string.h>
23:            #include "GLCDroutinesEasyPic.h"
24:            
25:            /*------------------------------------------------------------------------------
26:             * Static variables for internal use (not visible outside of this file)
27:             -----------------------------------------------------------------------------*/
28:            
29:            /* The following instruction delays assume 16MHz clock. These can be changed for
30:            ** other oscillator frequencies but note the valid range is only 0-255
31:            */
32:            static const unsigned char EnableDelayCount_ = 2; // 5 us delay
33:            static const unsigned char DataDelayCount_ = 4; // 1 us delay
34:            
35:            /*------------------------------------------------------------------------------
36:             * Public Library Functions
37:             -----------------------------------------------------------------------------*/
38:            
39:            /******************************************************************************
40:             *     Function Name:	WriteData
41:             *     Parameters:      unsigned char data
42:             *     Description:		This function sends a byte to the GLCD by setting LATD
43:             *                      and cycling the enable pin. To write data to the GLCD,
44:             *                      RS must be logic HIGH and RW must be logic LOW.
45:             *
46:             ******************************************************************************/
47:            void WriteData(unsigned char data){
176E  CFD9     MOVFF FSR2, POSTINC1
1770  FFE6     NOP
1772  CFE1     MOVFF FSR1, FSR2
1774  FFD9     NOP
48:                GLCD_RS_LAT = 1;      // RS must be logic HIGH with RW logic LOW to tell the
1776  848A     BSF LATB, 2, ACCESS
49:                GLCD_RW_LAT = 0;      // GLCD that data is being written to it.
1778  968A     BCF LATB, 3, ACCESS
50:                
51:                GLCD_DATA_LAT = data; // Set the Data LAT line to the data input.
177A  0EFE     MOVLW 0xFE
177C  50DB     MOVF PLUSW2, W, ACCESS
177E  6E8C     MOVWF LATD, ACCESS
52:                
53:                Delay1TCY();Delay1TCY();Delay1TCY();Delay1TCY(); // Delay 1 us
1780  0000     NOP
1782  0000     NOP
1784  0000     NOP
1786  0000     NOP
54:                
55:                Enable();
1788  D804     RCALL Enable
56:            }
178A  52E5     MOVF POSTDEC1, F, ACCESS
178C  CFE7     MOVFF INDF1, FSR2
178E  FFD9     NOP
1790  0012     RETURN 0
57:            
58:            /******************************************************************************
59:             *     Function Name:	Enable
60:             *     Parameters:      None
61:             *     Description:		This function switches the EN pin of the GLCD to enable 
62:             *                      data or an instruction
63:             *
64:             ******************************************************************************/
65:            void Enable( void ){
66:                GLCD_E_LAT = 1;  // The GLCD E pin must first be driven logic HIGH...
1792  888A     BSF LATB, 4, ACCESS
67:                Delay10TCYx( EnableDelayCount_ ); // Delay 5 us
1794  C06E     MOVFF EnableDelayCount_, POSTINC1
1796  FFE6     NOP
1798  ECE2     CALL 0x1DC4, 0
179A  F00E     NOP
179C  52E5     MOVF POSTDEC1, F, ACCESS
68:                GLCD_E_LAT = 0;  // and then driven logic LOW to submit the command.
179E  988A     BCF LATB, 4, ACCESS
69:                Delay10TCYx( EnableDelayCount_ );
17A0  C06E     MOVFF EnableDelayCount_, POSTINC1
17A2  FFE6     NOP
17A4  ECE2     CALL 0x1DC4, 0
17A6  F00E     NOP
17A8  52E5     MOVF POSTDEC1, F, ACCESS
70:                
71:            }
17AA  0012     RETURN 0
72:            
73:            /******************************************************************************
74:             *     Function Name:	InitGLCD
75:             *     Parameters:      None
76:             *     Description:		This function initializes the 123x64 WDG0151 graphic LCD
77:             *                      by sending the display on command to both controllers
78:             *
79:             ******************************************************************************/
80:            void InitGLCD( void ){
81:                GLCD_CS0_LAT = 1;   // Turn both GLCD controllers off.
17AC  808A     BSF LATB, 0, ACCESS
82:                GLCD_CS1_LAT = 1;
17AE  828A     BSF LATB, 1, ACCESS
83:                GLCD_RST_LAT = 1;   // Enable GLCD RESET.
17B0  8A8A     BSF LATB, 5, ACCESS
84:                GLCD_CS0_LAT = 0;
17B2  908A     BCF LATB, 0, ACCESS
85:                GLCD_CS1_LAT = 0;   // Turn both controllers on again.
17B4  928A     BCF LATB, 1, ACCESS
86:                GLCD_RS_LAT = 0;    // RS and RW instruction write configuration.
17B6  948A     BCF LATB, 2, ACCESS
87:                GLCD_RW_LAT = 0;
17B8  968A     BCF LATB, 3, ACCESS
88:                GLCD_DATA_LAT = 0x3F;   // This command turns the GLCD on.
17BA  0E3F     MOVLW 0x3F
17BC  6E8C     MOVWF LATD, ACCESS
89:                Enable();
17BE  EFC9     GOTO 0x1792
17C0  F00B     NOP
90:            }
91:            
92:            /******************************************************************************
93:             *     Function Name:	SetColumn
94:             *     Parameters:      unsigned char col
95:             *     Description:		This function sets the cursor to the column on the GLCD
96:             *                      specified by col, which is a number from 0 to 127
97:             *
98:             ******************************************************************************/
99:            void SetColumn(unsigned char col){
17C2  CFD9     MOVFF FSR2, POSTINC1
17C4  FFE6     NOP
17C6  CFE1     MOVFF FSR1, FSR2
17C8  FFD9     NOP
100:               GLCD_RS_LAT = 0;    // RS and RW low sets the GLCD to take instructions.
17CA  948A     BCF LATB, 2, ACCESS
101:               GLCD_RW_LAT = 0;
17CC  968A     BCF LATB, 3, ACCESS
102:               if(col < 64){       // If col is within the first 64 columns then it is
17CE  0E40     MOVLW 0x40
17D0  6EF3     MOVWF PROD, ACCESS
17D2  0EFE     MOVLW 0xFE
17D4  CFDB     MOVFF PLUSW2, PRODH
17D6  FFF4     NOP
17D8  50F3     MOVF PROD, W, ACCESS
17DA  5CF4     SUBWF PRODH, W, ACCESS
17DC  E203     BC 0x17E4
103:                   GLCD_CS0_LAT = 0; // being controlled by the first controller.
17DE  908A     BCF LATB, 0, ACCESS
104:                   GLCD_CS1_LAT = 1;
17E0  828A     BSF LATB, 1, ACCESS
105:               }else{              // Otherwise it is being controlled by the second one.
17E2  D009     BRA 0x17F6
106:                   GLCD_CS0_LAT = 1;
17E4  808A     BSF LATB, 0, ACCESS
107:                   GLCD_CS1_LAT = 0;
17E6  928A     BCF LATB, 1, ACCESS
108:                   col = col - 64; // No matter what, both controllers need a value 0 - 63.
17E8  0EFE     MOVLW 0xFE
17EA  50DB     MOVF PLUSW2, W, ACCESS
17EC  0FC0     ADDLW 0xC0
17EE  6EE7     MOVWF INDF1, ACCESS
17F0  0EFE     MOVLW 0xFE
17F2  CFE7     MOVFF INDF1, PLUSW2
17F4  FFDB     NOP
109:               }                      
110:               col = (col | 0x40) & 0x7F; // To set Y address (column), DB7 must be LOW and
17F6  0EFE     MOVLW 0xFE
17F8  50DB     MOVF PLUSW2, W, ACCESS
17FA  0940     IORLW 0x40
17FC  0B7F     ANDLW 0x7F
17FE  6EE7     MOVWF INDF1, ACCESS
1800  0EFE     MOVLW 0xFE
1802  CFE7     MOVFF INDF1, PLUSW2
1804  FFDB     NOP
111:               GLCD_DATA_LAT = col;        // DB6 must be HIGH - hence the OR. Then the AND
1806  50DB     MOVF PLUSW2, W, ACCESS
1808  6E8C     MOVWF LATD, ACCESS
112:               Enable();                   // sets the col values and retains the previous
180A  DFC3     RCALL Enable
113:           }                               // settings.
180C  52E5     MOVF POSTDEC1, F, ACCESS
180E  CFE7     MOVFF INDF1, FSR2
1810  FFD9     NOP
1812  0012     RETURN 0
114:           
115:           /******************************************************************************
116:            *     Function Name:	SetPage
117:            *     Parameters:      unsigned char page
118:            *     Description:		This function sets the page of the GLCD. Can be from 0 
119:            *                      to 7.
120:            *
121:            ******************************************************************************/
122:           void SetPage(unsigned char page){
1814  CFD9     MOVFF FSR2, POSTINC1
1816  FFE6     NOP
1818  CFE1     MOVFF FSR1, FSR2
181A  FFD9     NOP
123:               if(page > 7){       // Checks that the input is within the allowable range.
181C  0EFE     MOVLW 0xFE
181E  50DB     MOVF PLUSW2, W, ACCESS
1820  0807     SUBLW 0x7
1822  E30D     BNC 0x183E
124:                   return;
125:               }
126:               GLCD_RS_LAT = 0;    // Set RS and RW for an instruction.
1824  948A     BCF LATB, 2, ACCESS
127:               GLCD_RW_LAT = 0;
1826  968A     BCF LATB, 3, ACCESS
128:               page = (page | 0xB8) & 0xBF; // Similar to setting the column, setting the X
1828  0EFE     MOVLW 0xFE
182A  50DB     MOVF PLUSW2, W, ACCESS
182C  09B8     IORLW 0xB8
182E  0BBF     ANDLW 0xBF
1830  6EE7     MOVWF INDF1, ACCESS
1832  0EFE     MOVLW 0xFE
1834  CFE7     MOVFF INDF1, PLUSW2
1836  FFDB     NOP
129:               GLCD_DATA_LAT = page;         // location (page) requires setting DB7 and
1838  50DB     MOVF PLUSW2, W, ACCESS
183A  6E8C     MOVWF LATD, ACCESS
130:               Enable();                     // DB5:3 HIGH, DB6 LOW, and setting DB2:0 to
183C  DFAA     RCALL Enable
131:           }                                 // the desired page value.
183E  52E5     MOVF POSTDEC1, F, ACCESS
1840  CFE7     MOVFF INDF1, FSR2
1842  FFD9     NOP
1844  0012     RETURN 0
132:           
133:           /******************************************************************************
134:            *     Function Name:	SetCursor
135:            *     Parameters:      unsigned char x, unsigned char y
136:            *     Description:		This function sets the page and column of the GLCD.
137:            *
138:            ******************************************************************************/
139:           void SetCursor(unsigned char col, unsigned char page){
1846  CFD9     MOVFF FSR2, POSTINC1
1848  FFE6     NOP
184A  CFE1     MOVFF FSR1, FSR2
184C  FFD9     NOP
140:               SetColumn(col);     // Sets the desired column (X) and page (Y) together.
184E  0EFE     MOVLW 0xFE
1850  CFDB     MOVFF PLUSW2, POSTINC1
1852  FFE6     NOP
1854  DFB6     RCALL SetColumn
1856  52E5     MOVF POSTDEC1, F, ACCESS
141:               SetPage(page);      // SetPage does not need to change CS since it is already
1858  0EFD     MOVLW 0xFD
185A  CFDB     MOVFF PLUSW2, POSTINC1
185C  FFE6     NOP
185E  DFDA     RCALL SetPage
1860  52E5     MOVF POSTDEC1, F, ACCESS
142:           }                         // set using SetColumn.
1862  52E5     MOVF POSTDEC1, F, ACCESS
1864  CFE7     MOVFF INDF1, FSR2
1866  FFD9     NOP
1868  0012     RETURN 0
143:           
144:           /******************************************************************************
145:            *     Function Name:	ClearLine
146:            *     Parameters:      unsigned char page, unsigned char half
147:            *     Description:		This function completely clears the specified page (from
148:            *                      0 to 7) and half (0 being left and 1 being right) of the
149:            *                      GLCD.
150:            *
151:            ******************************************************************************/
152:           void ClearLine(unsigned char page, unsigned char half){
186A  CFD9     MOVFF FSR2, POSTINC1
186C  FFE6     NOP
186E  CFE1     MOVFF FSR1, FSR2
1870  FFD9     NOP
1872  52E6     MOVF POSTINC1, F, ACCESS
153:               unsigned char i;
154:               if(half == 0){          // Half 0 is the left side of the GLCD.
1874  0EFD     MOVLW 0xFD
1876  50DB     MOVF PLUSW2, W, ACCESS
1878  E113     BNZ 0x18A0
155:                   GLCD_CS0_LAT = 0;   
187A  908A     BCF LATB, 0, ACCESS
156:                   GLCD_CS1_LAT = 1;
187C  828A     BSF LATB, 1, ACCESS
157:                   for(i=0;i<65;i++){      // Loop through every column of the chosen page.
187E  6ADF     CLRF INDF2, ACCESS
1880  0E41     MOVLW 0x41
1882  5CDF     SUBWF INDF2, W, ACCESS
1884  E22C     BC 0x18DE
189C  2ADF     INCF INDF2, F, ACCESS
189E  D7F0     BRA 0x1880
158:                       SetCursor(i,page);  // Set page and column.
1886  0EFE     MOVLW 0xFE
1888  CFDB     MOVFF PLUSW2, POSTINC1
188A  FFE6     NOP
188C  CFDF     MOVFF INDF2, POSTINC1
188E  FFE6     NOP
1890  DFDA     RCALL SetCursor
1892  52E5     MOVF POSTDEC1, F, ACCESS
1894  52E5     MOVF POSTDEC1, F, ACCESS
159:                       WriteData(0x00);    // Writing 0x00 essentially "clears" that column.
1896  6AE6     CLRF POSTINC1, ACCESS
1898  DF6A     RCALL WriteData
189A  52E5     MOVF POSTDEC1, F, ACCESS
160:                   }
161:               }else if(half == 1){    // Half 1 is the right side of the GLCD.
18A0  0EFD     MOVLW 0xFD
18A2  04DB     DECF PLUSW2, W, ACCESS
18A4  E11C     BNZ 0x18DE
162:                   GLCD_CS0_LAT = 1;
18A6  808A     BSF LATB, 0, ACCESS
163:                   GLCD_CS1_LAT = 0;
18A8  928A     BCF LATB, 1, ACCESS
164:                   for(i=65;i<128;i++){
18AA  0E41     MOVLW 0x41
18AC  6EDF     MOVWF INDF2, ACCESS
18AE  50DF     MOVF INDF2, W, ACCESS
18B0  6E00     MOVWF __tmp_0, ACCESS
18B2  6A01     CLRF rand2, ACCESS
18B4  90D8     BCF STATUS, 0, ACCESS
18B6  5001     MOVF rand2, W, ACCESS
18B8  E604     BN 0x18C2
18BA  0E80     MOVLW 0x80
18BC  5C00     SUBWF __tmp_0, W, ACCESS
18BE  0E00     MOVLW 0x0
18C0  5801     SUBWFB rand2, W, ACCESS
18C2  E20D     BC 0x18DE
18DA  2ADF     INCF INDF2, F, ACCESS
18DC  D7E8     BRA 0x18AE
165:                       SetCursor(i,page);
18C4  0EFE     MOVLW 0xFE
18C6  CFDB     MOVFF PLUSW2, POSTINC1
18C8  FFE6     NOP
18CA  CFDF     MOVFF INDF2, POSTINC1
18CC  FFE6     NOP
18CE  DFBB     RCALL SetCursor
18D0  52E5     MOVF POSTDEC1, F, ACCESS
18D2  52E5     MOVF POSTDEC1, F, ACCESS
166:                       WriteData(0x00);
18D4  6AE6     CLRF POSTINC1, ACCESS
18D6  DF4B     RCALL WriteData
18D8  52E5     MOVF POSTDEC1, F, ACCESS
167:                   }
168:               }else{
169:                   return;
170:               }
171:           }
18DE  52E5     MOVF POSTDEC1, F, ACCESS
18E0  52E5     MOVF POSTDEC1, F, ACCESS
18E2  CFE7     MOVFF INDF1, FSR2
18E4  FFD9     NOP
18E6  0012     RETURN 0
172:           
173:           /******************************************************************************
174:            *     Function Name:	ClearGLCD
175:            *     Parameters:      None
176:            *     Description:		This function completely clears the entire GLCD screen.
177:            *
178:            ******************************************************************************/
179:           void ClearGLCD( void ){
18E8  CFD9     MOVFF FSR2, POSTINC1
18EA  FFE6     NOP
18EC  CFE1     MOVFF FSR1, FSR2
18EE  FFD9     NOP
18F0  52E6     MOVF POSTINC1, F, ACCESS
180:               unsigned char j;
181:               for(j=0;j<8;j++){       // Loops through every page on both halves of the
18F2  6ADF     CLRF INDF2, ACCESS
18F4  0E08     MOVLW 0x8
18F6  5CDF     SUBWF INDF2, W, ACCESS
18F8  E20F     BC 0x1918
1914  2ADF     INCF INDF2, F, ACCESS
1916  D7EE     BRA 0x18F4
182:                   ClearLine(j,0);     // GLCD to clear the entire thing.
18FA  6AE6     CLRF POSTINC1, ACCESS
18FC  CFDF     MOVFF INDF2, POSTINC1
18FE  FFE6     NOP
1900  DFB4     RCALL ClearLine
1902  52E5     MOVF POSTDEC1, F, ACCESS
1904  52E5     MOVF POSTDEC1, F, ACCESS
183:                   ClearLine(j,1);
1906  0E01     MOVLW 0x1
1908  6EE6     MOVWF POSTINC1, ACCESS
190A  CFDF     MOVFF INDF2, POSTINC1
190C  FFE6     NOP
190E  DFAD     RCALL ClearLine
1910  52E5     MOVF POSTDEC1, F, ACCESS
1912  52E5     MOVF POSTDEC1, F, ACCESS
184:               }
185:           }
1918  52E5     MOVF POSTDEC1, F, ACCESS
191A  52E5     MOVF POSTDEC1, F, ACCESS
191C  CFE7     MOVFF INDF1, FSR2
191E  FFD9     NOP
1920  0012     RETURN 0
186:           
